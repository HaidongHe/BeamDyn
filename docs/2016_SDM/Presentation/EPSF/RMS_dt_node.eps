%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: RMS_dt_node.pdf
%%Creator: (Adobe Acrobat 11.0.7)
%%For: qwang2
%%CreationDate: 12/31/15, 11:32 AM
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2015-12-13T10:08:43-06:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
gsave
0 432 mo
576 432 li
576 0 li
0 0 li
cp
clp
0 432 mo
576 432 li
576 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
72 216 mo
250.56 268.018 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 113.774 mo
161.28 184.479 li
339.84 251.818 li
518.4 333.693 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 0 cmyk
@
gsave
67.75 118.024 mo
76.25 118.024 li
76.25 109.524 li
67.75 109.524 li
cp
clp
.5 lw
0 lc
72 117.774 mo
73.0608 117.774 74.0783 117.353 74.8284 116.603 cv
75.5785 115.853 76 114.835 76 113.774 cv
76 112.713 75.5785 111.696 74.8284 110.946 cv
74.0783 110.196 73.0608 109.774 72 109.774 cv
70.9392 109.774 69.9217 110.196 69.1716 110.946 cv
68.4215 111.696 68 112.713 68 113.774 cv
68 114.835 68.4215 115.853 69.1716 116.603 cv
69.9217 117.353 70.9392 117.774 72 117.774 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
157.03 188.729 mo
165.53 188.729 li
165.53 180.229 li
157.03 180.229 li
cp
clp
.5 lw
0 lc
161.28 188.479 mo
162.341 188.479 163.358 188.057 164.108 187.307 cv
164.859 186.557 165.28 185.54 165.28 184.479 cv
165.28 183.418 164.859 182.4 164.108 181.65 cv
163.358 180.9 162.341 180.479 161.28 180.479 cv
160.219 180.479 159.202 180.9 158.452 181.65 cv
157.701 182.4 157.28 183.418 157.28 184.479 cv
157.28 185.54 157.701 186.557 158.452 187.307 cv
159.202 188.057 160.219 188.479 161.28 188.479 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
335.59 256.068 mo
344.09 256.068 li
344.09 247.568 li
335.59 247.568 li
cp
clp
.5 lw
0 lc
339.84 255.818 mo
340.901 255.818 341.918 255.396 342.668 254.646 cv
343.419 253.896 343.84 252.879 343.84 251.818 cv
343.84 250.757 343.419 249.739 342.668 248.989 cv
341.918 248.239 340.901 247.818 339.84 247.818 cv
338.779 247.818 337.762 248.239 337.012 248.989 cv
336.261 249.739 335.84 250.757 335.84 251.818 cv
335.84 252.879 336.261 253.896 337.012 254.646 cv
337.762 255.396 338.779 255.818 339.84 255.818 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
514.15 337.943 mo
522.65 337.943 li
522.65 329.443 li
514.15 329.443 li
cp
clp
.5 lw
0 lc
518.4 337.693 mo
519.461 337.693 520.478 337.271 521.228 336.521 cv
521.979 335.771 522.4 334.754 522.4 333.693 cv
522.4 332.632 521.979 331.615 521.228 330.865 cv
520.478 330.114 519.461 329.693 518.4 329.693 cv
517.339 329.693 516.322 330.114 515.572 330.865 cv
514.821 331.615 514.4 332.632 514.4 333.693 cv
514.4 334.754 514.821 335.771 515.572 336.521 cv
516.322 337.271 517.339 337.693 518.4 337.693 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 113.775 mo
161.28 184.481 li
339.84 251.822 li
518.4 333.703 li
.930816 .793027 0 0 cmyk
@
gsave
67.9458 117.261 mo
76.0542 117.261 li
76.0542 109.525 li
67.9458 109.525 li
cp
clp
.5 lw
0 lc
2 lj
72 109.775 mo
71.1019 112.539 li
68.1958 112.539 li
70.5469 114.247 li
69.6489 117.011 li
72 115.303 li
74.3511 117.011 li
73.4531 114.247 li
75.8042 112.539 li
72.8981 112.539 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
157.226 187.967 mo
165.334 187.967 li
165.334 180.231 li
157.226 180.231 li
cp
clp
.5 lw
0 lc
2 lj
161.28 180.481 mo
160.382 183.245 li
157.476 183.245 li
159.827 184.953 li
158.929 187.717 li
161.28 186.009 li
163.631 187.717 li
162.733 184.953 li
165.084 183.245 li
162.178 183.245 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
335.786 255.308 mo
343.894 255.308 li
343.894 247.572 li
335.786 247.572 li
cp
clp
.5 lw
0 lc
2 lj
339.84 247.822 mo
338.942 250.586 li
336.036 250.586 li
338.387 252.294 li
337.489 255.058 li
339.84 253.35 li
342.191 255.058 li
341.293 252.294 li
343.644 250.586 li
340.738 250.586 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
514.346 337.189 mo
522.454 337.189 li
522.454 329.453 li
514.346 329.453 li
cp
clp
.5 lw
0 lc
2 lj
518.4 329.703 mo
517.502 332.467 li
514.596 332.467 li
516.947 334.175 li
516.049 336.939 li
518.4 335.231 li
520.751 336.939 li
519.853 334.175 li
522.204 332.467 li
519.298 332.467 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
72 43.2 mo
518.4 43.2 li
1 /0 /CSD get_res sepcs
1 sep
@
518.4 388.8 mo
518.4 43.2 li
@
72 388.8 mo
518.4 388.8 li
@
72 388.8 mo
72 43.2 li
@
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
.5 lw
0 lc
1 lj
[1 3 ] 0 dsh
72 388.8 mo
72 43.2 li
@
grestore
72 388.8 mo
72 384.8 li
f
.5 lw
0 lc
1 lj
72 388.8 mo
72 384.8 li
@
72 43.2 mo
72 47.2 li
f
72 43.2 mo
72 47.2 li
@
73.997 397.209 mo
74.561 397.329 75.005 397.581 75.317 397.965 cv
75.629 398.349 75.797 398.829 75.797 399.381 cv
75.797 400.245 75.497 400.917 74.909 401.385 cv
74.309 401.853 73.469 402.081 72.377 402.081 cv
72.005 402.081 71.621 402.045 71.237 401.973 cv
70.853 401.913 70.445 401.805 70.037 401.661 cv
70.037 400.521 li
70.361 400.713 70.721 400.857 71.117 400.953 cv
71.501 401.049 71.909 401.097 72.341 401.097 cv
73.085 401.097 73.649 400.953 74.033 400.665 cv
74.417 400.377 74.621 399.945 74.621 399.381 cv
74.621 398.877 74.441 398.469 74.081 398.181 cv
73.721 397.893 73.217 397.737 72.569 397.737 cv
71.549 397.737 li
71.549 396.765 li
72.617 396.765 li
73.193 396.765 73.637 396.657 73.949 396.417 cv
74.261 396.189 74.417 395.853 74.417 395.409 cv
74.417 394.965 74.249 394.617 73.937 394.377 cv
73.613 394.137 73.157 394.017 72.569 394.017 cv
72.245 394.017 71.897 394.053 71.525 394.125 cv
71.153 394.197 70.745 394.305 70.301 394.449 cv
70.301 393.393 li
70.745 393.273 71.165 393.177 71.561 393.117 cv
71.945 393.057 72.317 393.021 72.677 393.021 cv
73.565 393.021 74.273 393.225 74.801 393.633 cv
75.329 394.041 75.593 394.593 75.593 395.289 cv
75.593 395.769 75.449 396.177 75.173 396.513 cv
74.897 396.849 74.501 397.089 73.997 397.209 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
161.28 388.8 mo
161.28 43.2 li
@
grestore
161.28 388.8 mo
161.28 384.8 li
f
161.28 388.8 mo
161.28 384.8 li
@
161.28 43.2 mo
161.28 47.2 li
f
161.28 43.2 mo
161.28 47.2 li
@
162.628 394.209 mo
159.641 398.877 li
162.628 398.877 li
162.628 394.209 li
162.316 393.177 mo
163.805 393.177 li
163.805 398.877 li
165.053 398.877 li
165.053 399.861 li
163.805 399.861 li
163.805 401.925 li
162.628 401.925 li
162.628 399.861 li
158.68 399.861 li
158.68 398.721 li
162.316 393.177 li
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
250.56 388.8 mo
250.56 43.2 li
@
grestore
250.56 388.8 mo
250.56 384.8 li
f
250.56 388.8 mo
250.56 384.8 li
@
250.56 43.2 mo
250.56 47.2 li
f
250.56 43.2 mo
250.56 47.2 li
@
249.02 393.177 mo
253.664 393.177 li
253.664 394.173 li
250.1 394.173 li
250.1 396.321 li
250.268 396.261 250.448 396.213 250.616 396.189 cv
250.784 396.165 250.964 396.141 251.132 396.141 cv
252.104 396.141 252.872 396.417 253.448 396.945 cv
254.024 397.485 254.312 398.205 254.312 399.117 cv
254.312 400.065 254.012 400.797 253.424 401.313 cv
252.836 401.829 252.008 402.081 250.952 402.081 cv
250.58 402.081 250.208 402.045 249.824 401.997 cv
249.44 401.937 249.056 401.853 248.648 401.721 cv
248.648 400.533 li
248.996 400.725 249.356 400.869 249.74 400.965 cv
250.112 401.061 250.508 401.097 250.928 401.097 cv
251.6 401.097 252.14 400.929 252.536 400.569 cv
252.92 400.209 253.124 399.729 253.124 399.117 cv
253.124 398.517 252.92 398.037 252.536 397.677 cv
252.14 397.317 251.6 397.137 250.928 397.137 cv
250.616 397.137 250.292 397.173 249.98 397.245 cv
249.668 397.317 249.344 397.425 249.02 397.569 cv
249.02 393.177 li
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
339.84 388.8 mo
339.84 43.2 li
@
grestore
339.84 388.8 mo
339.84 384.8 li
f
339.84 388.8 mo
339.84 384.8 li
@
339.84 43.2 mo
339.84 47.2 li
f
339.84 43.2 mo
339.84 47.2 li
@
340.784 397.077 mo
340.256 397.077 339.836 397.269 339.524 397.629 cv
339.212 397.989 339.056 398.493 339.056 399.117 cv
339.056 399.753 339.212 400.257 339.524 400.617 cv
339.836 400.977 340.256 401.157 340.784 401.157 cv
341.312 401.157 341.732 400.977 342.044 400.617 cv
342.356 400.257 342.512 399.753 342.512 399.117 cv
342.512 398.493 342.356 397.989 342.044 397.629 cv
341.732 397.269 341.312 397.077 340.784 397.077 cv
343.136 393.369 mo
343.136 394.449 li
342.836 394.305 342.536 394.197 342.236 394.125 cv
341.924 394.053 341.624 394.017 341.336 394.017 cv
340.544 394.017 339.944 394.281 339.536 394.809 cv
339.128 395.337 338.888 396.141 338.84 397.197 cv
339.068 396.861 339.356 396.597 339.704 396.417 cv
340.052 396.237 340.436 396.141 340.856 396.141 cv
341.732 396.141 342.428 396.417 342.932 396.945 cv
343.436 397.473 343.7 398.205 343.7 399.117 cv
343.7 400.017 343.424 400.737 342.896 401.277 cv
342.368 401.817 341.66 402.081 340.784 402.081 cv
339.776 402.081 338.996 401.697 338.468 400.929 cv
337.928 400.161 337.664 399.033 337.664 397.557 cv
337.664 396.177 337.988 395.073 338.648 394.257 cv
339.296 393.441 340.184 393.021 341.288 393.021 cv
341.576 393.021 341.876 393.057 342.188 393.105 cv
342.488 393.165 342.8 393.249 343.136 393.369 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
429.12 388.8 mo
429.12 43.2 li
@
grestore
429.12 388.8 mo
429.12 384.8 li
f
429.12 388.8 mo
429.12 384.8 li
@
429.12 43.2 mo
429.12 47.2 li
f
429.12 43.2 mo
429.12 47.2 li
@
427.292 393.177 mo
432.919 393.177 li
432.919 393.681 li
429.74 401.925 li
428.504 401.925 li
431.491 394.173 li
427.292 394.173 li
427.292 393.177 li
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
518.4 388.8 mo
518.4 43.2 li
@
grestore
518.4 388.8 mo
518.4 384.8 li
f
518.4 388.8 mo
518.4 384.8 li
@
518.4 43.2 mo
518.4 47.2 li
f
518.4 43.2 mo
518.4 47.2 li
@
519.216 397.773 mo
518.652 397.773 518.208 397.929 517.884 398.229 cv
517.56 398.529 517.404 398.937 517.404 399.465 cv
517.404 399.993 517.56 400.413 517.884 400.713 cv
518.208 401.013 518.652 401.157 519.216 401.157 cv
519.768 401.157 520.212 401.013 520.536 400.701 cv
520.86 400.401 521.028 399.993 521.028 399.465 cv
521.028 398.937 520.86 398.529 520.548 398.229 cv
520.224 397.929 519.78 397.773 519.216 397.773 cv
518.028 397.269 mo
517.524 397.149 517.128 396.909 516.84 396.561 cv
516.552 396.213 516.42 395.793 516.42 395.289 cv
516.42 394.593 516.66 394.041 517.164 393.633 cv
517.656 393.225 518.34 393.021 519.216 393.021 cv
520.08 393.021 520.764 393.225 521.268 393.633 cv
521.76 394.041 522.012 394.593 522.012 395.289 cv
522.012 395.793 521.868 396.213 521.58 396.561 cv
521.292 396.909 520.908 397.149 520.404 397.269 cv
520.968 397.401 521.412 397.665 521.736 398.049 cv
522.048 398.433 522.216 398.913 522.216 399.465 cv
522.216 400.317 521.952 400.965 521.436 401.409 cv
520.908 401.865 520.176 402.081 519.216 402.081 cv
518.244 402.081 517.5 401.865 516.984 401.409 cv
516.468 400.965 516.216 400.317 516.216 399.465 cv
516.216 398.913 516.372 398.433 516.696 398.049 cv
517.008 397.665 517.452 397.401 518.028 397.269 cv
517.596 395.397 mo
517.596 395.853 517.728 396.213 518.016 396.465 cv
518.304 396.717 518.7 396.837 519.216 396.837 cv
519.72 396.837 520.116 396.717 520.404 396.465 cv
520.692 396.213 520.836 395.853 520.836 395.397 cv
520.836 394.941 520.692 394.593 520.404 394.341 cv
520.116 394.089 519.72 393.957 519.216 393.957 cv
518.7 393.957 518.304 394.089 518.016 394.341 cv
517.728 394.593 517.596 394.941 517.596 395.397 cv
f
210.152 410.048 mo
212.812 410.048 li
219.272 422.248 li
219.272 410.048 li
221.192 410.048 li
221.192 424.628 li
218.532 424.628 li
212.072 412.428 li
212.072 424.628 li
210.152 424.628 li
210.152 410.048 li
f
224.852 420.308 mo
224.852 413.688 li
226.652 413.688 li
226.652 420.248 li
226.652 421.288 226.852 422.048 227.252 422.568 cv
227.652 423.088 228.252 423.348 229.072 423.348 cv
230.032 423.348 230.812 423.048 231.372 422.428 cv
231.932 421.808 232.212 420.968 232.212 419.888 cv
232.212 413.688 li
234.012 413.688 li
234.012 424.628 li
232.212 424.628 li
232.212 422.948 li
231.772 423.628 231.252 424.108 230.692 424.428 cv
230.112 424.728 229.452 424.888 228.692 424.888 cv
227.432 424.888 226.472 424.508 225.832 423.728 cv
225.172 422.968 224.852 421.828 224.852 420.308 cv
f
246.232 415.788 mo
246.672 414.988 247.212 414.408 247.832 414.008 cv
248.452 413.628 249.192 413.428 250.052 413.428 cv
251.172 413.428 252.052 413.828 252.672 414.628 cv
253.292 415.428 253.612 416.568 253.612 418.028 cv
253.612 424.628 li
251.812 424.628 li
251.812 418.088 li
251.812 417.048 251.612 416.268 251.252 415.748 cv
250.872 415.248 250.312 414.988 249.552 414.988 cv
248.612 414.988 247.872 415.308 247.332 415.928 cv
246.792 416.548 246.532 417.388 246.532 418.448 cv
246.532 424.628 li
244.732 424.628 li
244.732 418.088 li
244.732 417.048 244.532 416.268 244.172 415.748 cv
243.792 415.248 243.212 414.988 242.452 414.988 cv
241.532 414.988 240.792 415.308 240.252 415.928 cv
239.712 416.548 239.452 417.388 239.452 418.448 cv
239.452 424.628 li
237.652 424.628 li
237.652 413.688 li
239.452 413.688 li
239.452 415.388 li
239.852 414.728 240.352 414.228 240.932 413.908 cv
241.492 413.588 242.172 413.428 242.972 413.428 cv
243.772 413.428 244.432 413.628 244.992 414.028 cv
245.552 414.428 245.952 415.028 246.232 415.788 cv
f
265.052 419.168 mo
265.052 417.848 264.772 416.828 264.232 416.068 cv
263.672 415.308 262.932 414.928 261.992 414.928 cv
261.032 414.928 260.292 415.308 259.752 416.068 cv
259.192 416.828 258.932 417.848 258.932 419.168 cv
258.932 420.488 259.192 421.528 259.752 422.288 cv
260.292 423.048 261.032 423.408 261.992 423.408 cv
262.932 423.408 263.672 423.048 264.232 422.288 cv
264.772 421.528 265.052 420.488 265.052 419.168 cv
258.932 415.348 mo
259.292 414.708 259.772 414.228 260.352 413.908 cv
260.932 413.588 261.632 413.428 262.432 413.428 cv
263.752 413.428 264.832 413.968 265.672 415.008 cv
266.492 416.068 266.912 417.448 266.912 419.168 cv
266.912 420.888 266.492 422.288 265.672 423.328 cv
264.832 424.368 263.752 424.888 262.432 424.888 cv
261.632 424.888 260.932 424.728 260.352 424.428 cv
259.772 424.128 259.292 423.648 258.932 422.988 cv
258.932 424.628 li
257.132 424.628 li
257.132 409.428 li
258.932 409.428 li
258.932 415.348 li
f
279.252 418.708 mo
279.252 419.588 li
270.992 419.588 li
271.072 420.828 271.432 421.788 272.112 422.428 cv
272.772 423.068 273.692 423.388 274.892 423.388 cv
275.572 423.388 276.252 423.308 276.892 423.148 cv
277.532 422.988 278.192 422.728 278.832 422.368 cv
278.832 424.068 li
278.192 424.348 277.532 424.568 276.852 424.688 cv
276.172 424.808 275.472 424.888 274.792 424.888 cv
273.032 424.888 271.652 424.388 270.632 423.388 cv
269.612 422.388 269.112 421.008 269.112 419.268 cv
269.112 417.488 269.592 416.068 270.552 415.008 cv
271.512 413.968 272.832 413.428 274.472 413.428 cv
275.952 413.428 277.112 413.908 277.972 414.848 cv
278.812 415.808 279.252 417.088 279.252 418.708 cv
277.452 418.188 mo
277.432 417.208 277.152 416.428 276.632 415.828 cv
276.092 415.248 275.372 414.948 274.492 414.948 cv
273.492 414.948 272.692 415.248 272.092 415.808 cv
271.492 416.368 271.132 417.168 271.052 418.188 cv
277.452 418.188 li
f
288.532 415.368 mo
288.332 415.248 288.112 415.168 287.872 415.108 cv
287.632 415.068 287.372 415.028 287.092 415.028 cv
286.072 415.028 285.292 415.368 284.752 416.028 cv
284.192 416.688 283.932 417.628 283.932 418.868 cv
283.932 424.628 li
282.132 424.628 li
282.132 413.688 li
283.932 413.688 li
283.932 415.388 li
284.292 414.728 284.792 414.228 285.392 413.908 cv
285.992 413.588 286.732 413.428 287.612 413.428 cv
287.732 413.428 287.872 413.448 288.032 413.448 cv
288.172 413.468 288.332 413.488 288.532 413.528 cv
288.532 415.368 li
f
301.012 414.948 mo
300.052 414.948 299.292 415.328 298.732 416.088 cv
298.172 416.848 297.892 417.868 297.892 419.168 cv
297.892 420.488 298.152 421.508 298.712 422.268 cv
299.272 423.028 300.032 423.388 301.012 423.388 cv
301.972 423.388 302.732 423.028 303.292 422.268 cv
303.852 421.508 304.132 420.488 304.132 419.168 cv
304.132 417.888 303.852 416.848 303.292 416.088 cv
302.732 415.328 301.972 414.948 301.012 414.948 cv
301.012 413.428 mo
302.572 413.428 303.792 413.948 304.692 414.948 cv
305.572 415.968 306.032 417.368 306.032 419.168 cv
306.032 420.968 305.572 422.368 304.692 423.368 cv
303.792 424.388 302.572 424.888 301.012 424.888 cv
299.432 424.888 298.192 424.388 297.312 423.368 cv
296.432 422.368 295.992 420.968 295.992 419.168 cv
295.992 417.368 296.432 415.968 297.312 414.948 cv
298.192 413.948 299.432 413.428 301.012 413.428 cv
f
314.552 409.428 mo
314.552 410.928 li
312.832 410.928 li
312.192 410.928 311.732 411.068 311.492 411.328 cv
311.232 411.588 311.112 412.048 311.112 412.728 cv
311.112 413.688 li
314.072 413.688 li
314.072 415.088 li
311.112 415.088 li
311.112 424.628 li
309.312 424.628 li
309.312 415.088 li
307.592 415.088 li
307.592 413.688 li
309.312 413.688 li
309.312 412.928 li
309.312 411.728 309.592 410.828 310.152 410.268 cv
310.712 409.708 311.612 409.428 312.852 409.428 cv
314.552 409.428 li
f
322.492 410.048 mo
325.152 410.048 li
331.612 422.248 li
331.612 410.048 li
333.532 410.048 li
333.532 424.628 li
330.872 424.628 li
324.412 412.428 li
324.412 424.628 li
322.492 424.628 li
322.492 410.048 li
f
341.612 414.948 mo
340.652 414.948 339.892 415.328 339.332 416.088 cv
338.772 416.848 338.492 417.868 338.492 419.168 cv
338.492 420.488 338.752 421.508 339.312 422.268 cv
339.872 423.028 340.632 423.388 341.612 423.388 cv
342.572 423.388 343.332 423.028 343.892 422.268 cv
344.452 421.508 344.732 420.488 344.732 419.168 cv
344.732 417.888 344.452 416.848 343.892 416.088 cv
343.332 415.328 342.572 414.948 341.612 414.948 cv
341.612 413.428 mo
343.172 413.428 344.392 413.948 345.292 414.948 cv
346.172 415.968 346.632 417.368 346.632 419.168 cv
346.632 420.968 346.172 422.368 345.292 423.368 cv
344.392 424.388 343.172 424.888 341.612 424.888 cv
340.032 424.888 338.792 424.388 337.912 423.368 cv
337.032 422.368 336.592 420.968 336.592 419.168 cv
336.592 417.368 337.032 415.968 337.912 414.948 cv
338.792 413.948 340.032 413.428 341.612 413.428 cv
f
356.812 415.348 mo
356.812 409.428 li
358.612 409.428 li
358.612 424.628 li
356.812 424.628 li
356.812 422.988 li
356.432 423.648 355.952 424.128 355.372 424.428 cv
354.792 424.728 354.112 424.888 353.312 424.888 cv
351.992 424.888 350.912 424.368 350.072 423.328 cv
349.232 422.288 348.832 420.888 348.832 419.168 cv
348.832 417.448 349.232 416.068 350.072 415.008 cv
350.912 413.968 351.992 413.428 353.312 413.428 cv
354.112 413.428 354.792 413.588 355.372 413.908 cv
355.952 414.228 356.432 414.708 356.812 415.348 cv
350.692 419.168 mo
350.692 420.488 350.952 421.528 351.492 422.288 cv
352.032 423.048 352.792 423.408 353.752 423.408 cv
354.692 423.408 355.432 423.048 355.992 422.288 cv
356.532 421.528 356.812 420.488 356.812 419.168 cv
356.812 417.848 356.532 416.828 355.992 416.068 cv
355.432 415.308 354.692 414.928 353.752 414.928 cv
352.792 414.928 352.032 415.308 351.492 416.068 cv
350.952 416.828 350.692 417.848 350.692 419.168 cv
f
371.672 418.708 mo
371.672 419.588 li
363.412 419.588 li
363.492 420.828 363.852 421.788 364.532 422.428 cv
365.192 423.068 366.112 423.388 367.312 423.388 cv
367.992 423.388 368.672 423.308 369.312 423.148 cv
369.952 422.988 370.612 422.728 371.252 422.368 cv
371.252 424.068 li
370.612 424.348 369.952 424.568 369.272 424.688 cv
368.592 424.808 367.892 424.888 367.212 424.888 cv
365.452 424.888 364.072 424.388 363.052 423.388 cv
362.032 422.388 361.532 421.008 361.532 419.268 cv
361.532 417.488 362.012 416.068 362.972 415.008 cv
363.932 413.968 365.252 413.428 366.892 413.428 cv
368.372 413.428 369.532 413.908 370.392 414.848 cv
371.232 415.808 371.672 417.088 371.672 418.708 cv
369.872 418.188 mo
369.852 417.208 369.572 416.428 369.052 415.828 cv
368.512 415.248 367.792 414.948 366.912 414.948 cv
365.912 414.948 365.112 415.248 364.512 415.808 cv
363.912 416.368 363.552 417.168 363.472 418.188 cv
369.872 418.188 li
f
381.592 414.008 mo
381.592 415.708 li
381.072 415.468 380.552 415.268 380.012 415.128 cv
379.452 415.008 378.892 414.928 378.312 414.928 cv
377.412 414.928 376.732 415.068 376.292 415.348 cv
375.852 415.628 375.632 416.028 375.632 416.568 cv
375.632 416.988 375.792 417.308 376.112 417.548 cv
376.432 417.788 377.072 418.028 378.032 418.228 cv
378.652 418.368 li
379.932 418.648 380.832 419.048 381.372 419.528 cv
381.892 420.028 382.172 420.728 382.172 421.608 cv
382.172 422.628 381.772 423.428 380.972 424.008 cv
380.172 424.608 379.052 424.888 377.652 424.888 cv
377.052 424.888 376.452 424.828 375.812 424.728 cv
375.172 424.628 374.512 424.468 373.812 424.228 cv
373.812 422.368 li
374.472 422.728 375.132 422.988 375.772 423.148 cv
376.412 423.328 377.052 423.408 377.692 423.408 cv
378.532 423.408 379.192 423.268 379.652 422.988 cv
380.092 422.708 380.332 422.288 380.332 421.748 cv
380.332 421.268 380.152 420.888 379.832 420.628 cv
379.512 420.368 378.792 420.108 377.672 419.868 cv
377.052 419.728 li
375.932 419.488 375.112 419.128 374.632 418.648 cv
374.132 418.168 373.892 417.508 373.892 416.648 cv
373.892 415.628 374.252 414.828 374.972 414.268 cv
375.692 413.708 376.732 413.428 378.092 413.428 cv
378.752 413.428 379.372 413.488 379.972 413.588 cv
380.552 413.688 381.092 413.828 381.592 414.008 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
72 388.8 mo
518.4 388.8 li
@
grestore
72 388.8 mo
76 388.8 li
f
72 388.8 mo
76 388.8 li
@
518.4 388.8 mo
514.4 388.8 li
f
518.4 388.8 mo
514.4 388.8 li
@
42.488 391.838 mo
44.42 391.838 li
44.42 385.166 li
42.32 385.586 li
42.32 384.506 li
44.408 384.086 li
45.596 384.086 li
45.596 391.838 li
47.528 391.838 li
47.528 392.834 li
42.488 392.834 li
42.488 391.838 li
f
52.4508 384.866 mo
51.8388 384.866 51.3828 385.166 51.0708 385.766 cv
50.7588 386.366 50.6148 387.266 50.6148 388.466 cv
50.6148 389.666 50.7588 390.566 51.0708 391.166 cv
51.3828 391.766 51.8388 392.066 52.4508 392.066 cv
53.0628 392.066 53.5188 391.766 53.8308 391.166 cv
54.1308 390.566 54.2868 389.666 54.2868 388.466 cv
54.2868 387.266 54.1308 386.366 53.8308 385.766 cv
53.5188 385.166 53.0628 384.866 52.4508 384.866 cv
52.4508 383.93 mo
53.4228 383.93 54.1668 384.326 54.6948 385.094 cv
55.2108 385.874 55.4748 387.002 55.4748 388.466 cv
55.4748 389.942 55.2108 391.07 54.6948 391.838 cv
54.1668 392.606 53.4228 392.99 52.4508 392.99 cv
51.4668 392.99 50.7108 392.606 50.1948 391.838 cv
49.6788 391.07 49.4268 389.942 49.4268 388.466 cv
49.4268 387.002 49.6788 385.874 50.1948 385.094 cv
50.7108 384.326 51.4668 383.93 52.4508 383.93 cv
f
56.6811 383.897 mo
58.8903 383.897 li
58.8903 384.569 li
56.6811 384.569 li
56.6811 383.897 li
f
62.711 383.233 mo
63.1058 383.317 63.4166 383.494 63.635 383.762 cv
63.8534 384.031 63.971 384.367 63.971 384.754 cv
63.971 385.358 63.761 385.829 63.3494 386.156 cv
62.9294 386.484 62.3414 386.644 61.577 386.644 cv
61.3166 386.644 61.0478 386.618 60.779 386.568 cv
60.5102 386.526 60.2246 386.45 59.939 386.35 cv
59.939 385.552 li
60.1658 385.686 60.4178 385.787 60.695 385.854 cv
60.9638 385.921 61.2494 385.955 61.5518 385.955 cv
62.0726 385.955 62.4674 385.854 62.7362 385.652 cv
63.005 385.451 63.1478 385.148 63.1478 384.754 cv
63.1478 384.401 63.0218 384.115 62.7698 383.914 cv
62.5178 383.712 62.165 383.603 61.7114 383.603 cv
60.9974 383.603 li
60.9974 382.922 li
61.745 382.922 li
62.1482 382.922 62.459 382.847 62.6774 382.679 cv
62.8958 382.519 63.005 382.284 63.005 381.973 cv
63.005 381.662 62.8874 381.419 62.669 381.251 cv
62.4422 381.083 62.123 380.999 61.7114 380.999 cv
61.4846 380.999 61.241 381.024 60.9806 381.074 cv
60.7202 381.125 60.4346 381.2 60.1238 381.301 cv
60.1238 380.562 li
60.4346 380.478 60.7286 380.411 61.0058 380.369 cv
61.2746 380.327 61.535 380.302 61.787 380.302 cv
62.4086 380.302 62.9042 380.444 63.2738 380.73 cv
63.6434 381.016 63.8282 381.402 63.8282 381.889 cv
63.8282 382.225 63.7274 382.511 63.5342 382.746 cv
63.341 382.981 63.0638 383.149 62.711 383.233 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
72 302.4 mo
518.4 302.4 li
@
grestore
72 302.4 mo
76 302.4 li
f
72 302.4 mo
76 302.4 li
@
518.4 302.4 mo
514.4 302.4 li
f
518.4 302.4 mo
514.4 302.4 li
@
42.488 305.438 mo
44.42 305.438 li
44.42 298.766 li
42.32 299.186 li
42.32 298.106 li
44.408 297.686 li
45.596 297.686 li
45.596 305.438 li
47.528 305.438 li
47.528 306.434 li
42.488 306.434 li
42.488 305.438 li
f
52.4508 298.466 mo
51.8388 298.466 51.3828 298.766 51.0708 299.366 cv
50.7588 299.966 50.6148 300.866 50.6148 302.066 cv
50.6148 303.266 50.7588 304.166 51.0708 304.766 cv
51.3828 305.366 51.8388 305.666 52.4508 305.666 cv
53.0628 305.666 53.5188 305.366 53.8308 304.766 cv
54.1308 304.166 54.2868 303.266 54.2868 302.066 cv
54.2868 300.866 54.1308 299.966 53.8308 299.366 cv
53.5188 298.766 53.0628 298.466 52.4508 298.466 cv
52.4508 297.53 mo
53.4228 297.53 54.1668 297.926 54.6948 298.694 cv
55.2108 299.474 55.4748 300.602 55.4748 302.066 cv
55.4748 303.542 55.2108 304.67 54.6948 305.438 cv
54.1668 306.206 53.4228 306.59 52.4508 306.59 cv
51.4668 306.59 50.7108 306.206 50.1948 305.438 cv
49.6788 304.67 49.4268 303.542 49.4268 302.066 cv
49.4268 300.602 49.6788 299.474 50.1948 298.694 cv
50.7108 297.926 51.4668 297.53 52.4508 297.53 cv
f
56.6811 297.497 mo
58.8903 297.497 li
58.8903 298.169 li
56.6811 298.169 li
56.6811 297.497 li
f
60.9134 299.437 mo
63.803 299.437 li
63.803 300.134 li
59.9138 300.134 li
59.9138 299.437 li
60.2246 299.118 60.653 298.681 61.199 298.127 cv
61.7366 297.581 62.081 297.228 62.2238 297.068 cv
62.4926 296.774 62.6774 296.522 62.7782 296.312 cv
62.879 296.111 62.9378 295.901 62.9378 295.699 cv
62.9378 295.38 62.8202 295.111 62.5934 294.91 cv
62.3666 294.708 62.0726 294.599 61.703 294.599 cv
61.4426 294.599 61.1654 294.649 60.8798 294.733 cv
60.5942 294.826 60.2834 294.96 59.9558 295.145 cv
59.9558 294.305 li
60.2918 294.17 60.6026 294.07 60.8882 294.002 cv
61.1738 293.935 61.4426 293.902 61.6862 293.902 cv
62.3162 293.902 62.8202 294.061 63.1982 294.38 cv
63.5762 294.7 63.7694 295.12 63.7694 295.649 cv
63.7694 295.901 63.719 296.144 63.6266 296.363 cv
63.5342 296.59 63.3662 296.858 63.1142 297.161 cv
63.047 297.245 62.8286 297.472 62.459 297.85 cv
62.0894 298.228 61.577 298.757 60.9134 299.437 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
72 216 mo
518.4 216 li
@
grestore
72 216 mo
76 216 li
f
72 216 mo
76 216 li
@
518.4 216 mo
514.4 216 li
f
518.4 216 mo
514.4 216 li
@
42.488 218.929 mo
44.42 218.929 li
44.42 212.257 li
42.32 212.677 li
42.32 211.597 li
44.408 211.177 li
45.596 211.177 li
45.596 218.929 li
47.528 218.929 li
47.528 219.925 li
42.488 219.925 li
42.488 218.929 li
f
52.4508 211.957 mo
51.8388 211.957 51.3828 212.257 51.0708 212.857 cv
50.7588 213.457 50.6148 214.357 50.6148 215.557 cv
50.6148 216.757 50.7588 217.657 51.0708 218.257 cv
51.3828 218.857 51.8388 219.157 52.4508 219.157 cv
53.0628 219.157 53.5188 218.857 53.8308 218.257 cv
54.1308 217.657 54.2868 216.757 54.2868 215.557 cv
54.2868 214.357 54.1308 213.457 53.8308 212.857 cv
53.5188 212.257 53.0628 211.957 52.4508 211.957 cv
52.4508 211.021 mo
53.4228 211.021 54.1668 211.417 54.6948 212.185 cv
55.2108 212.965 55.4748 214.093 55.4748 215.557 cv
55.4748 217.033 55.2108 218.161 54.6948 218.929 cv
54.1668 219.697 53.4228 220.081 52.4508 220.081 cv
51.4668 220.081 50.7108 219.697 50.1948 218.929 cv
49.6788 218.161 49.4268 217.033 49.4268 215.557 cv
49.4268 214.093 49.6788 212.965 50.1948 212.185 cv
50.7108 211.417 51.4668 211.021 52.4508 211.021 cv
f
56.6811 210.987 mo
58.8903 210.987 li
58.8903 211.659 li
56.6811 211.659 li
56.6811 210.987 li
f
60.3422 212.928 mo
61.6946 212.928 li
61.6946 208.257 li
60.2246 208.551 li
60.2246 207.795 li
61.6862 207.501 li
62.5178 207.501 li
62.5178 212.928 li
63.8702 212.928 li
63.8702 213.625 li
60.3422 213.625 li
60.3422 212.928 li
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
72 129.6 mo
518.4 129.6 li
@
grestore
72 129.6 mo
76 129.6 li
f
72 129.6 mo
76 129.6 li
@
518.4 129.6 mo
514.4 129.6 li
f
518.4 129.6 mo
514.4 129.6 li
@
45.488 132.638 mo
47.42 132.638 li
47.42 125.966 li
45.32 126.386 li
45.32 125.306 li
47.408 124.886 li
48.596 124.886 li
48.596 132.638 li
50.528 132.638 li
50.528 133.634 li
45.488 133.634 li
45.488 132.638 li
f
55.4508 125.666 mo
54.8388 125.666 54.3828 125.966 54.0708 126.566 cv
53.7588 127.166 53.6148 128.066 53.6148 129.266 cv
53.6148 130.466 53.7588 131.366 54.0708 131.966 cv
54.3828 132.566 54.8388 132.866 55.4508 132.866 cv
56.0628 132.866 56.5188 132.566 56.8308 131.966 cv
57.1308 131.366 57.2868 130.466 57.2868 129.266 cv
57.2868 128.066 57.1308 127.166 56.8308 126.566 cv
56.5188 125.966 56.0628 125.666 55.4508 125.666 cv
55.4508 124.73 mo
56.4228 124.73 57.1668 125.126 57.6948 125.894 cv
58.2108 126.674 58.4748 127.802 58.4748 129.266 cv
58.4748 130.742 58.2108 131.87 57.6948 132.638 cv
57.1668 133.406 56.4228 133.79 55.4508 133.79 cv
54.4668 133.79 53.7108 133.406 53.1948 132.638 cv
52.6788 131.87 52.4268 130.742 52.4268 129.266 cv
52.4268 127.802 52.6788 126.674 53.1948 125.894 cv
53.7108 125.126 54.4668 124.73 55.4508 124.73 cv
f
61.9407 121.757 mo
61.5123 121.757 61.1931 121.967 60.9747 122.387 cv
60.7563 122.807 60.6555 123.437 60.6555 124.277 cv
60.6555 125.117 60.7563 125.747 60.9747 126.167 cv
61.1931 126.587 61.5123 126.797 61.9407 126.797 cv
62.3691 126.797 62.6883 126.587 62.9067 126.167 cv
63.1167 125.747 63.2259 125.117 63.2259 124.277 cv
63.2259 123.437 63.1167 122.807 62.9067 122.387 cv
62.6883 121.967 62.3691 121.757 61.9407 121.757 cv
61.9407 121.102 mo
62.6211 121.102 63.1419 121.379 63.5115 121.916 cv
63.8727 122.462 64.0575 123.252 64.0575 124.277 cv
64.0575 125.31 63.8727 126.1 63.5115 126.637 cv
63.1419 127.175 62.6211 127.444 61.9407 127.444 cv
61.2519 127.444 60.7227 127.175 60.3615 126.637 cv
60.0003 126.1 59.8239 125.31 59.8239 124.277 cv
59.8239 123.252 60.0003 122.462 60.3615 121.916 cv
60.7227 121.379 61.2519 121.102 61.9407 121.102 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
72 43.2 mo
518.4 43.2 li
@
grestore
72 43.2 mo
76 43.2 li
f
72 43.2 mo
76 43.2 li
@
518.4 43.2 mo
514.4 43.2 li
f
518.4 43.2 mo
514.4 43.2 li
@
45.488 46.129 mo
47.42 46.129 li
47.42 39.457 li
45.32 39.877 li
45.32 38.797 li
47.408 38.377 li
48.596 38.377 li
48.596 46.129 li
50.528 46.129 li
50.528 47.125 li
45.488 47.125 li
45.488 46.129 li
f
55.4508 39.157 mo
54.8388 39.157 54.3828 39.457 54.0708 40.057 cv
53.7588 40.657 53.6148 41.557 53.6148 42.757 cv
53.6148 43.957 53.7588 44.857 54.0708 45.457 cv
54.3828 46.057 54.8388 46.357 55.4508 46.357 cv
56.0628 46.357 56.5188 46.057 56.8308 45.457 cv
57.1308 44.857 57.2868 43.957 57.2868 42.757 cv
57.2868 41.557 57.1308 40.657 56.8308 40.057 cv
56.5188 39.457 56.0628 39.157 55.4508 39.157 cv
55.4508 38.221 mo
56.4228 38.221 57.1668 38.617 57.6948 39.385 cv
58.2108 40.165 58.4748 41.293 58.4748 42.757 cv
58.4748 44.233 58.2108 45.361 57.6948 46.129 cv
57.1668 46.897 56.4228 47.281 55.4508 47.281 cv
54.4668 47.281 53.7108 46.897 53.1948 46.129 cv
52.6788 45.361 52.4268 44.233 52.4268 42.757 cv
52.4268 41.293 52.6788 40.165 53.1948 39.385 cv
53.7108 38.617 54.4668 38.221 55.4508 38.221 cv
f
60.3111 40.1278 mo
61.6635 40.1278 li
61.6635 35.4574 li
60.1935 35.7514 li
60.1935 34.9954 li
61.6551 34.7014 li
62.4867 34.7014 li
62.4867 40.1278 li
63.8391 40.1278 li
63.8391 40.825 li
60.3111 40.825 li
60.3111 40.1278 li
f
72 362.791 mo
74 362.791 li
f
72 362.791 mo
74 362.791 li
@
518.4 362.791 mo
516.4 362.791 li
f
518.4 362.791 mo
516.4 362.791 li
@
72 347.577 mo
74 347.577 li
f
72 347.577 mo
74 347.577 li
@
518.4 347.577 mo
516.4 347.577 li
f
518.4 347.577 mo
516.4 347.577 li
@
72 336.782 mo
74 336.782 li
f
72 336.782 mo
74 336.782 li
@
518.4 336.782 mo
516.4 336.782 li
f
518.4 336.782 mo
516.4 336.782 li
@
72 328.409 mo
74 328.409 li
f
72 328.409 mo
74 328.409 li
@
518.4 328.409 mo
516.4 328.409 li
f
518.4 328.409 mo
516.4 328.409 li
@
72 321.568 mo
74 321.568 li
f
72 321.568 mo
74 321.568 li
@
518.4 321.568 mo
516.4 321.568 li
f
518.4 321.568 mo
516.4 321.568 li
@
72 315.784 mo
74 315.784 li
f
72 315.784 mo
74 315.784 li
@
518.4 315.784 mo
516.4 315.784 li
f
518.4 315.784 mo
516.4 315.784 li
@
72 310.773 mo
74 310.773 li
f
72 310.773 mo
74 310.773 li
@
518.4 310.773 mo
516.4 310.773 li
f
518.4 310.773 mo
516.4 310.773 li
@
72 306.353 mo
74 306.353 li
f
72 306.353 mo
74 306.353 li
@
518.4 306.353 mo
516.4 306.353 li
f
518.4 306.353 mo
516.4 306.353 li
@
72 276.391 mo
74 276.391 li
f
72 276.391 mo
74 276.391 li
@
518.4 276.391 mo
516.4 276.391 li
f
518.4 276.391 mo
516.4 276.391 li
@
72 261.177 mo
74 261.177 li
f
72 261.177 mo
74 261.177 li
@
518.4 261.177 mo
516.4 261.177 li
f
518.4 261.177 mo
516.4 261.177 li
@
72 250.382 mo
74 250.382 li
f
72 250.382 mo
74 250.382 li
@
518.4 250.382 mo
516.4 250.382 li
f
518.4 250.382 mo
516.4 250.382 li
@
72 242.009 mo
74 242.009 li
f
72 242.009 mo
74 242.009 li
@
518.4 242.009 mo
516.4 242.009 li
f
518.4 242.009 mo
516.4 242.009 li
@
72 235.168 mo
74 235.168 li
f
72 235.168 mo
74 235.168 li
@
518.4 235.168 mo
516.4 235.168 li
f
518.4 235.168 mo
516.4 235.168 li
@
72 229.384 mo
74 229.384 li
f
72 229.384 mo
74 229.384 li
@
518.4 229.384 mo
516.4 229.384 li
f
518.4 229.384 mo
516.4 229.384 li
@
72 224.373 mo
74 224.373 li
f
72 224.373 mo
74 224.373 li
@
518.4 224.373 mo
516.4 224.373 li
f
518.4 224.373 mo
516.4 224.373 li
@
72 219.953 mo
74 219.953 li
f
72 219.953 mo
74 219.953 li
@
518.4 219.953 mo
516.4 219.953 li
f
518.4 219.953 mo
516.4 219.953 li
@
72 189.991 mo
74 189.991 li
f
72 189.991 mo
74 189.991 li
@
518.4 189.991 mo
516.4 189.991 li
f
518.4 189.991 mo
516.4 189.991 li
@
72 174.777 mo
74 174.777 li
f
72 174.777 mo
74 174.777 li
@
518.4 174.777 mo
516.4 174.777 li
f
518.4 174.777 mo
516.4 174.777 li
@
72 163.982 mo
74 163.982 li
f
72 163.982 mo
74 163.982 li
@
518.4 163.982 mo
516.4 163.982 li
f
518.4 163.982 mo
516.4 163.982 li
@
72 155.609 mo
74 155.609 li
f
72 155.609 mo
74 155.609 li
@
518.4 155.609 mo
516.4 155.609 li
f
518.4 155.609 mo
516.4 155.609 li
@
72 148.768 mo
74 148.768 li
f
72 148.768 mo
74 148.768 li
@
518.4 148.768 mo
516.4 148.768 li
f
518.4 148.768 mo
516.4 148.768 li
@
72 142.984 mo
74 142.984 li
f
72 142.984 mo
74 142.984 li
@
518.4 142.984 mo
516.4 142.984 li
f
518.4 142.984 mo
516.4 142.984 li
@
72 137.973 mo
74 137.973 li
f
72 137.973 mo
74 137.973 li
@
518.4 137.973 mo
516.4 137.973 li
f
518.4 137.973 mo
516.4 137.973 li
@
72 133.553 mo
74 133.553 li
f
72 133.553 mo
74 133.553 li
@
518.4 133.553 mo
516.4 133.553 li
f
518.4 133.553 mo
516.4 133.553 li
@
72 103.591 mo
74 103.591 li
f
72 103.591 mo
74 103.591 li
@
518.4 103.591 mo
516.4 103.591 li
f
518.4 103.591 mo
516.4 103.591 li
@
72 88.3767 mo
74 88.3767 li
f
72 88.3767 mo
74 88.3767 li
@
518.4 88.3767 mo
516.4 88.3767 li
f
518.4 88.3767 mo
516.4 88.3767 li
@
72 77.582 mo
74 77.582 li
f
72 77.582 mo
74 77.582 li
@
518.4 77.582 mo
516.4 77.582 li
f
518.4 77.582 mo
516.4 77.582 li
@
72 69.209 mo
74 69.209 li
f
72 69.209 mo
74 69.209 li
@
518.4 69.209 mo
516.4 69.209 li
f
518.4 69.209 mo
516.4 69.209 li
@
72 62.3677 mo
74 62.3677 li
f
72 62.3677 mo
74 62.3677 li
@
518.4 62.3677 mo
516.4 62.3677 li
f
518.4 62.3677 mo
516.4 62.3677 li
@
72 56.5835 mo
74 56.5835 li
f
72 56.5835 mo
74 56.5835 li
@
518.4 56.5835 mo
516.4 56.5835 li
f
518.4 56.5835 mo
516.4 56.5835 li
@
72 51.573 mo
74 51.573 li
f
72 51.573 mo
74 51.573 li
@
518.4 51.573 mo
516.4 51.573 li
f
518.4 51.573 mo
516.4 51.573 li
@
72 47.1534 mo
74 47.1534 li
f
72 47.1534 mo
74 47.1534 li
@
518.4 47.1534 mo
516.4 47.1534 li
f
518.4 47.1534 mo
516.4 47.1534 li
@
27.92 254.46 mo
27.56 254.46 27.22 254.38 26.86 254.22 cv
26.52 254.06 26.22 253.86 25.94 253.6 cv
25.66 253.36 25.42 253.06 25.2 252.7 cv
24.84 253.22 24.4 253.46 23.84 253.46 cv
23.24 253.46 22.72 253.22 22.28 252.72 cv
21.84 252.24 21.52 251.62 21.28 250.9 cv
21.06 250.18 20.94 249.54 20.94 248.96 cv
20.94 248.72 21 248.4 21.1 248 cv
21.22 247.6 21.36 247.24 21.52 246.92 cv
21.7 246.62 21.9 246.46 22.1 246.46 cv
22.26 246.46 22.4 246.52 22.52 246.64 cv
22.64 246.76 22.7 246.9 22.7 247.04 cv
22.7 247.1 22.64 247.24 22.5 247.48 cv
22.36 247.72 22.24 247.98 22.12 248.24 cv
22 248.52 21.94 248.8 21.94 249.12 cv
21.94 249.6 22 250.14 22.12 250.72 cv
22.24 251.3 22.44 251.8 22.72 252.24 cv
23 252.68 23.38 252.88 23.82 252.88 cv
24.26 252.88 24.64 252.64 24.92 252.14 cv
24.68 251.58 24.54 251.02 24.54 250.42 cv
24.54 249.38 24.74 248.86 25.1 248.86 cv
25.4 248.86 25.58 249.04 25.66 249.4 cv
25.74 249.76 25.78 250.16 25.78 250.62 cv
25.78 251.26 25.7 251.76 25.5 252.16 cv
25.74 252.6 26.06 253 26.48 253.34 cv
26.92 253.7 27.36 253.86 27.8 253.86 cv
28.24 253.86 28.56 253.72 28.8 253.42 cv
29.04 253.14 29.22 252.78 29.3 252.36 cv
29.4 251.94 29.44 251.52 29.44 251.08 cv
29.44 250.36 29.36 249.7 29.2 249.14 cv
29.04 248.58 28.72 248.16 28.2 247.9 cv
28.12 247.86 28.08 247.8 28.08 247.68 cv
28.12 247.54 28.22 247.46 28.34 247.46 cv
28.36 247.46 28.42 247.48 28.54 247.52 cv
28.96 247.74 29.3 248.04 29.58 248.44 cv
29.86 248.84 30.06 249.28 30.2 249.76 cv
30.34 250.24 30.42 250.74 30.42 251.24 cv
30.42 252.08 30.2 252.82 29.78 253.48 cv
29.34 254.14 28.72 254.46 27.92 254.46 cv
25.2 251.38 mo
25.24 251.14 25.26 250.88 25.26 250.58 cv
25.26 250 25.22 249.64 25.14 249.48 cv
25.1 249.68 25.06 250 25.06 250.44 cv
25.06 250.78 25.12 251.1 25.2 251.38 cv
f
35.1019 244.998 mo
35.1019 245.096 35.0459 245.138 34.9199 245.138 cv
34.7939 245.11 li
34.6679 245.054 li
34.6119 244.956 li
34.6119 244.396 34.5839 243.99 34.5139 243.766 cv
34.4859 243.654 34.3599 243.556 34.1359 243.5 cv
26.4499 241.582 li
26.2539 241.554 li
26.1559 241.554 26.0999 241.61 26.0859 241.722 cv
26.0579 241.904 26.0299 242.24 26.0299 242.73 cv
26.0299 242.828 25.9739 242.87 25.8479 242.87 cv
25.7219 242.842 li
25.5959 242.786 li
25.5399 242.688 li
25.5399 238.446 li
25.5399 238.11 25.5819 237.76 25.6519 237.396 cv
25.7359 237.032 25.8479 236.696 26.0159 236.388 cv
26.1839 236.08 26.4079 235.828 26.6879 235.632 cv
26.9679 235.436 27.2899 235.338 27.6539 235.338 cv
28.1299 235.338 28.5499 235.506 28.9139 235.814 cv
29.2779 236.122 29.5859 236.514 29.8379 236.99 cv
30.0899 237.466 30.2579 237.914 30.3559 238.362 cv
30.4959 237.998 30.7059 237.704 30.9859 237.466 cv
31.2799 237.242 31.6159 237.116 31.9939 237.116 cv
32.1059 237.13 li
32.1899 237.13 li
33.4359 237.242 li
33.6179 237.256 33.7719 237.27 33.8979 237.27 cv
34.0379 237.284 34.1359 237.284 34.2059 237.284 cv
34.4579 237.284 34.6679 237.256 34.8219 237.172 cv
34.9759 237.102 35.0459 236.948 35.0459 236.724 cv
35.0459 236.444 34.9199 236.178 34.6399 235.954 cv
34.3739 235.73 34.0799 235.59 33.7579 235.52 cv
33.6319 235.38 li
33.6319 235.254 li
33.6319 235.17 33.7019 235.114 33.8139 235.114 cv
34.0939 235.184 34.3459 235.296 34.5839 235.436 cv
34.8359 235.59 35.0319 235.786 35.1719 236.01 cv
35.3119 236.234 35.3959 236.486 35.3959 236.738 cv
35.3959 237.284 35.2699 237.746 35.0459 238.138 cv
34.8079 238.53 34.4299 238.712 33.8979 238.712 cv
33.7019 238.712 33.5339 238.698 33.3799 238.656 cv
32.1339 238.348 li
32.0219 238.32 31.8959 238.292 31.7419 238.292 cv
31.3499 238.292 31.0559 238.432 30.8319 238.684 cv
30.6079 238.95 30.4959 239.286 30.4959 239.678 cv
30.4959 241.4 li
34.1919 242.324 li
34.3879 242.352 li
34.4859 242.352 34.5419 242.296 34.5559 242.184 cv
34.5979 242.016 34.6119 241.68 34.6119 241.176 cv
34.6119 241.092 34.6819 241.036 34.7939 241.036 cv
34.9339 241.064 35.0179 241.092 35.0459 241.106 cv
35.1019 241.274 li
35.1019 244.998 li
30.1319 241.316 mo
30.1319 239.762 li
30.1319 238.754 29.8799 237.984 29.3619 237.466 cv
29.1239 237.242 28.8159 237.046 28.4519 236.906 cv
28.0879 236.766 27.7239 236.696 27.3599 236.696 cv
27.0239 236.696 26.7439 236.808 26.5479 237.004 cv
26.3519 237.2 26.2259 237.452 26.1419 237.746 cv
26.0719 238.054 26.0299 238.376 26.0299 238.74 cv
26.0299 239.678 li
26.0299 239.93 26.0579 240.098 26.0999 240.182 cv
26.1419 240.266 26.2819 240.35 26.5059 240.406 cv
30.1319 241.316 li
f
35.1019 234.347 mo
35.1019 234.445 35.0459 234.487 34.9199 234.487 cv
34.8079 234.459 li
34.6679 234.417 li
34.6119 234.305 li
34.6119 233.423 34.3319 232.905 33.7579 232.751 cv
26.4499 230.931 li
26.2539 230.903 li
26.1559 230.903 26.0999 230.959 26.0859 231.071 cv
26.0579 231.253 26.0299 231.589 26.0299 232.079 cv
26.0299 232.177 25.9739 232.219 25.8479 232.219 cv
25.7219 232.191 li
25.5959 232.135 li
25.5399 232.037 li
25.5399 229.573 li
25.5399 229.475 25.5959 229.419 25.6939 229.391 cv
33.7159 228.299 li
25.6939 223.203 li
25.5959 223.147 25.5399 223.049 25.5399 222.937 cv
25.5399 220.557 li
25.5399 220.473 25.6099 220.417 25.7219 220.417 cv
25.8479 220.459 li
25.9879 220.515 li
26.0299 220.599 li
26.0299 221.173 26.0719 221.565 26.1279 221.789 cv
26.1699 221.915 26.2959 221.999 26.5059 222.055 cv
34.1919 223.973 li
34.2899 224.001 34.3599 224.001 34.3879 224.001 cv
34.4859 223.987 li
34.5279 223.945 li
34.5559 223.833 li
34.5979 223.665 34.6119 223.329 34.6119 222.825 cv
34.6119 222.741 34.6819 222.685 34.7939 222.685 cv
34.9339 222.727 35.0179 222.755 35.0459 222.769 cv
35.1019 222.923 li
35.1019 226.577 li
35.1019 226.675 35.0459 226.717 34.9199 226.717 cv
34.7939 226.689 li
34.6679 226.633 li
34.6119 226.535 li
34.6119 225.975 34.5839 225.569 34.5139 225.345 cv
34.4859 225.233 34.3599 225.135 34.1359 225.079 cv
26.0299 223.063 li
34.9479 228.719 li
35.0599 228.775 35.1019 228.873 35.1019 228.999 cv
35.1019 229.125 35.0599 229.195 34.9479 229.195 cv
26.1419 230.385 li
33.8139 232.303 li
33.9119 232.331 li
34.0239 232.345 li
34.2759 232.345 34.4299 232.247 34.4999 232.037 cv
34.5839 231.827 34.6119 231.561 34.6119 231.253 cv
34.6119 231.169 34.6819 231.113 34.7939 231.113 cv
34.9199 231.141 35.0039 231.169 35.0459 231.197 cv
35.1019 231.351 li
35.1019 234.347 li
f
35.3959 220.624 mo
35.3399 220.708 li
35.2559 220.736 li
32.0079 219.924 li
31.9239 219.812 li
31.9239 219.644 li
31.9659 219.56 li
32.0639 219.532 li
32.3859 219.616 32.6659 219.644 32.9179 219.644 cv
33.6039 219.644 34.1079 219.42 34.4299 218.958 cv
34.7659 218.496 34.9199 217.908 34.9199 217.194 cv
34.9199 216.886 34.8499 216.592 34.6959 216.298 cv
34.5559 216.004 34.3599 215.738 34.1079 215.514 cv
33.8699 215.29 33.6039 215.122 33.2959 214.982 cv
33.0019 214.856 32.6939 214.786 32.3859 214.786 cv
32.0639 214.786 31.7699 214.884 31.5179 215.052 cv
31.2659 215.22 31.0979 215.458 31.0139 215.766 cv
30.5659 217.474 li
30.4539 217.936 30.2019 218.3 29.8239 218.58 cv
29.4599 218.86 29.0399 218.986 28.5639 218.986 cv
28.0039 218.986 27.4719 218.818 26.9539 218.482 cv
26.4359 218.146 26.0159 217.712 25.7079 217.18 cv
25.3999 216.648 25.2319 216.102 25.2319 215.542 cv
25.2319 215.122 25.3159 214.73 25.4699 214.366 cv
25.6379 214.016 25.8759 213.736 26.2119 213.54 cv
25.2739 212.742 li
25.2319 212.644 li
25.2319 212.56 li
25.2879 212.476 li
25.3719 212.434 li
28.6199 213.246 li
28.7179 213.358 li
28.7179 213.526 li
28.7179 213.61 28.6759 213.652 28.5639 213.652 cv
28.2699 213.61 28.0179 213.582 27.7939 213.582 cv
27.3739 213.582 26.9959 213.666 26.6739 213.806 cv
26.3519 213.96 26.0999 214.184 25.9319 214.478 cv
25.7639 214.786 25.6799 215.15 25.6799 215.584 cv
25.6799 215.962 25.7919 216.34 26.0019 216.704 cv
26.2259 217.068 26.5059 217.376 26.8559 217.6 cv
27.2199 217.824 27.5839 217.936 27.9619 217.936 cv
28.2699 217.936 28.5359 217.852 28.7599 217.67 cv
28.9979 217.502 29.1519 217.264 29.2359 216.97 cv
29.6839 215.262 li
29.7679 214.954 29.9219 214.688 30.1179 214.464 cv
30.3279 214.24 30.5799 214.058 30.8599 213.932 cv
31.1399 213.82 31.4479 213.75 31.7839 213.75 cv
32.2319 213.75 32.6799 213.848 33.0999 214.03 cv
33.5339 214.226 33.9259 214.478 34.2759 214.814 cv
34.6399 215.15 34.9059 215.542 35.1019 215.962 cv
35.2979 216.382 35.3959 216.816 35.3959 217.25 cv
35.3959 218.37 35.0739 219.168 34.4299 219.644 cv
35.3539 220.428 li
35.3959 220.526 li
35.3959 220.624 li
f
34.94 206.698 mo
34.34 207.458 33.68 208.098 32.92 208.618 cv
32.16 209.158 31.34 209.598 30.5 209.938 cv
29.66 210.278 28.76 210.538 27.82 210.698 cv
26.9 210.878 25.96 210.958 25 210.958 cv
24.04 210.958 23.1 210.878 22.16 210.698 cv
21.24 210.538 20.34 210.278 19.46 209.918 cv
18.6 209.578 17.78 209.138 17.02 208.598 cv
16.26 208.058 15.6 207.418 15.04 206.698 cv
15 206.598 li
15 206.418 li
15.06 206.318 li
15.18 206.258 li
15.3 206.298 li
15.94 206.958 16.64 207.498 17.36 207.938 cv
18.08 208.378 18.86 208.718 19.68 208.978 cv
20.52 209.238 21.36 209.418 22.24 209.538 cv
23.12 209.658 24.04 209.718 25 209.718 cv
29.24 209.718 32.44 208.598 34.64 206.318 cv
34.8 206.258 li
34.92 206.318 li
34.98 206.418 li
34.98 206.598 li
34.94 206.698 li
f
27.22 202.195 mo
27.7 202.195 28.14 202.115 28.52 201.915 cv
28.92 201.715 29.22 201.435 29.42 201.075 cv
29.64 200.715 29.74 200.295 29.74 199.795 cv
29.74 199.235 29.64 198.675 29.4 198.115 cv
29.16 197.575 28.84 197.095 28.42 196.655 cv
28 196.215 27.52 195.855 26.98 195.535 cv
26.46 195.235 25.92 195.015 25.4 194.875 cv
18.18 193.075 li
18.04 193.055 17.94 193.035 17.88 193.035 cv
17.32 193.035 17.04 193.555 17.04 194.575 cv
17.04 194.715 16.96 194.775 16.78 194.775 cv
16.62 194.735 16.5 194.715 16.44 194.675 cv
16.38 194.655 16.34 194.575 16.34 194.435 cv
16.34 190.095 li
16.44 189.955 li
16.6 189.895 li
16.76 189.935 li
16.86 189.975 16.94 189.995 16.98 190.035 cv
17.04 190.155 li
17.04 191.435 17.46 192.175 18.26 192.375 cv
25.48 194.175 li
26.12 194.335 26.72 194.575 27.3 194.935 cv
27.9 195.295 28.42 195.735 28.9 196.255 cv
29.38 196.775 29.76 197.335 30.02 197.955 cv
30.28 198.575 30.42 199.215 30.42 199.855 cv
30.42 200.595 30.26 201.275 29.96 201.875 cv
29.64 202.475 29.2 202.955 28.62 203.295 cv
28.04 203.655 27.36 203.815 26.6 203.815 cv
26.16 203.815 25.76 203.775 25.4 203.675 cv
17.64 201.735 li
17.52 201.715 17.42 201.695 17.36 201.695 cv
17.22 201.695 17.14 201.775 17.12 201.935 cv
17.08 202.195 17.04 202.675 17.04 203.375 cv
17.04 203.515 16.96 203.575 16.78 203.575 cv
16.62 203.535 16.5 203.495 16.44 203.475 cv
16.38 203.455 16.34 203.375 16.34 203.235 cv
16.34 197.855 li
16.34 197.735 16.44 197.655 16.6 197.655 cv
16.78 197.695 li
16.96 197.775 li
17.04 197.915 li
17.04 198.735 17.1 199.295 17.18 199.615 cv
17.26 199.795 17.44 199.915 17.72 199.995 cv
25.48 201.935 li
26.2 202.115 26.78 202.195 27.22 202.195 cv
f
35.2419 190.806 mo
35.1159 190.918 li
35.0319 190.89 li
34.6119 190.638 34.1919 190.344 33.7999 189.98 cv
33.4079 189.63 33.0019 189.224 32.5959 188.776 cv
32.2039 188.328 31.7979 187.88 31.3919 187.432 cv
30.9859 186.984 30.6219 186.606 30.2999 186.326 cv
30.2999 186.382 li
30.2999 186.592 30.2439 186.9 30.1039 187.292 cv
29.9779 187.684 29.9079 187.992 29.9079 188.216 cv
29.9079 188.468 29.9639 188.706 30.0759 188.93 cv
30.1879 189.168 30.3419 189.322 30.5659 189.378 cv
30.6639 189.49 li
30.6639 189.658 li
30.6639 189.742 30.6219 189.77 30.5239 189.77 cv
30.4819 189.77 li
30.2159 189.7 29.9639 189.574 29.7259 189.406 cv
29.4879 189.238 29.2919 189.042 29.1379 188.79 cv
28.9979 188.552 28.9139 188.3 28.9139 188.034 cv
28.9139 187.852 28.9559 187.698 29.0399 187.572 cv
29.1239 187.46 29.2639 187.306 29.4319 187.138 cv
29.6139 186.97 29.7399 186.844 29.8239 186.732 cv
29.9079 186.634 29.9359 186.508 29.9359 186.354 cv
29.9359 186.158 29.8519 185.976 29.6559 185.808 cv
29.4739 185.64 29.2359 185.486 28.9559 185.318 cv
28.9139 185.22 li
28.9139 185.052 li
28.9559 184.982 li
29.0399 184.94 li
29.1239 184.968 li
29.5719 185.22 29.9779 185.514 30.3419 185.85 cv
30.7199 186.186 31.1539 186.634 31.6299 187.166 cv
32.1199 187.712 32.5259 188.174 32.8619 188.538 cv
33.1979 188.902 33.5479 189.252 33.8979 189.574 cv
33.8839 189.504 33.8699 189.406 33.8699 189.28 cv
33.8699 189.056 33.9399 188.734 34.0659 188.342 cv
34.2059 187.95 34.2619 187.656 34.2619 187.432 cv
34.2619 187.208 34.2199 186.97 34.1079 186.732 cv
34.0099 186.494 33.8699 186.284 33.6879 186.116 cv
33.5059 185.948 33.2959 185.822 33.0579 185.766 cv
32.9599 185.654 li
32.9599 185.486 li
33.0159 185.402 li
33.0999 185.36 li
33.1419 185.374 li
33.5059 185.458 33.8419 185.612 34.1639 185.822 cv
34.4859 186.046 34.7519 186.312 34.9479 186.62 cv
35.1439 186.928 35.2419 187.264 35.2419 187.614 cv
35.2419 187.796 35.1999 187.95 35.1299 188.076 cv
35.0599 188.202 34.9339 188.342 34.7519 188.51 cv
34.5699 188.678 34.4439 188.804 34.3599 188.916 cv
34.2759 189.028 34.2339 189.154 34.2339 189.294 cv
34.2339 189.77 34.5559 190.176 35.1999 190.54 cv
35.2419 190.638 li
35.2419 190.806 li
f
34.98 183.684 mo
34.98 183.804 34.92 183.864 34.8 183.864 cv
34.68 183.824 li
32.44 181.544 29.24 180.404 25 180.404 cv
20.76 180.404 17.54 181.544 15.34 183.784 cv
15.18 183.864 li
15.06 183.804 li
15 183.684 li
15 183.504 li
15.04 183.404 li
15.8 182.444 16.72 181.644 17.8 181.004 cv
18.88 180.364 20.04 179.904 21.26 179.604 cv
22.48 179.324 23.72 179.164 25 179.164 cv
25.96 179.164 26.88 179.244 27.8 179.404 cv
28.72 179.564 29.6 179.824 30.48 180.164 cv
31.36 180.524 32.16 180.964 32.92 181.484 cv
33.68 182.024 34.34 182.664 34.94 183.404 cv
34.98 183.504 li
34.98 183.684 li
f
77.472 275.811 mo
76.572 275.811 75.762 275.595 75.078 275.199 cv
74.376 274.803 73.836 274.227 73.458 273.489 cv
73.08 272.769 72.9 271.941 72.9 271.041 cv
72.9 269.745 73.26 268.431 73.998 267.135 cv
74.736 265.839 75.708 264.795 76.932 263.967 cv
78.138 263.157 79.416 262.743 80.748 262.743 cv
81.432 262.743 82.044 262.869 82.62 263.121 cv
83.196 263.373 83.664 263.715 84.06 264.147 cv
84.456 264.579 84.762 265.101 84.978 265.677 cv
85.194 266.253 85.302 266.901 85.302 267.585 cv
85.302 268.575 85.086 269.565 84.654 270.537 cv
84.222 271.527 83.646 272.427 82.908 273.219 cv
82.152 274.029 81.324 274.659 80.388 275.127 cv
79.452 275.577 78.48 275.811 77.472 275.811 cv
77.616 275.289 mo
78.48 275.289 79.308 275.019 80.064 274.461 cv
80.82 273.921 81.45 273.201 81.99 272.319 cv
82.53 271.455 82.926 270.537 83.214 269.565 cv
83.502 268.593 83.646 267.693 83.646 266.865 cv
83.646 266.217 83.52 265.623 83.304 265.083 cv
83.088 264.543 82.746 264.093 82.278 263.769 cv
81.81 263.445 81.27 263.265 80.622 263.265 cv
79.974 263.265 79.362 263.427 78.768 263.733 cv
78.174 264.039 77.634 264.435 77.148 264.939 cv
76.644 265.443 76.212 266.073 75.816 266.829 cv
75.42 267.585 75.132 268.377 74.934 269.205 cv
74.736 270.033 74.646 270.825 74.646 271.545 cv
74.646 272.571 74.88 273.453 75.384 274.191 cv
75.888 274.929 76.626 275.289 77.616 275.289 cv
f
91.2997 279.879 mo
90.6157 279.339 90.0397 278.745 89.5717 278.061 cv
89.0857 277.377 88.6897 276.639 88.3837 275.883 cv
88.0777 275.127 87.8437 274.317 87.6997 273.471 cv
87.5377 272.643 87.4657 271.797 87.4657 270.933 cv
87.4657 270.069 87.5377 269.223 87.6997 268.377 cv
87.8437 267.549 88.0777 266.739 88.4017 265.947 cv
88.7077 265.173 89.1037 264.435 89.5897 263.751 cv
90.0757 263.067 90.6517 262.473 91.2997 261.969 cv
91.3897 261.933 li
91.5517 261.933 li
91.6417 261.987 li
91.6957 262.095 li
91.6597 262.203 li
91.0657 262.779 90.5797 263.409 90.1837 264.057 cv
89.7877 264.705 89.4817 265.407 89.2477 266.145 cv
89.0137 266.901 88.8517 267.657 88.7437 268.449 cv
88.6357 269.241 88.5817 270.069 88.5817 270.933 cv
88.5817 274.749 89.5897 277.629 91.6417 279.609 cv
91.6957 279.753 li
91.6417 279.861 li
91.5517 279.915 li
91.3897 279.915 li
91.2997 279.879 li
f
94.093 275.127 mo
94.111 274.965 li
95.461 269.601 li
95.533 269.277 95.587 268.971 95.587 268.719 cv
95.587 268.215 95.407 267.945 95.065 267.945 cv
94.687 267.945 94.399 268.179 94.219 268.629 cv
94.039 269.079 93.859 269.637 93.697 270.321 cv
93.643 270.411 li
93.553 270.429 li
93.337 270.429 li
93.229 270.375 li
93.193 270.249 li
93.319 269.727 93.445 269.277 93.571 268.917 cv
93.679 268.557 93.877 268.233 94.129 267.927 cv
94.381 267.639 94.687 267.477 95.083 267.477 cv
95.515 267.477 95.911 267.621 96.271 267.909 cv
96.613 268.197 96.793 268.557 96.793 268.989 cv
97.153 268.521 97.567 268.161 98.053 267.891 cv
98.521 267.621 99.043 267.477 99.583 267.477 cv
99.997 267.477 100.357 267.567 100.681 267.711 cv
100.987 267.855 101.221 268.089 101.401 268.377 cv
101.581 268.665 101.671 269.025 101.671 269.421 cv
101.671 269.925 101.545 270.519 101.329 271.203 cv
101.113 271.905 100.843 272.679 100.519 273.543 cv
100.339 273.939 100.267 274.299 100.267 274.623 cv
100.267 274.983 100.393 275.163 100.681 275.163 cv
101.149 275.163 101.527 274.911 101.851 274.407 cv
102.157 273.903 102.373 273.363 102.517 272.787 cv
102.661 272.679 li
102.877 272.679 li
102.985 272.733 li
103.039 272.841 li
103.021 272.895 li
102.859 273.579 102.571 274.209 102.175 274.767 cv
101.761 275.343 101.257 275.613 100.645 275.613 cv
100.213 275.613 99.853 275.469 99.565 275.199 cv
99.259 274.911 99.115 274.569 99.115 274.137 cv
99.115 273.921 99.151 273.687 99.259 273.435 cv
99.403 273.039 99.565 272.571 99.763 272.031 cv
99.961 271.491 100.123 270.987 100.249 270.483 cv
100.375 269.979 100.447 269.547 100.447 269.151 cv
100.447 268.827 100.375 268.539 100.231 268.305 cv
100.087 268.071 99.871 267.945 99.547 267.945 cv
99.097 267.945 98.683 268.053 98.323 268.233 cv
97.963 268.431 97.639 268.683 97.369 269.007 cv
97.081 269.331 96.829 269.709 96.613 270.141 cv
95.389 275.037 li
95.353 275.217 95.263 275.343 95.119 275.451 cv
94.975 275.559 94.813 275.613 94.633 275.613 cv
94.489 275.613 94.363 275.559 94.255 275.487 cv
94.147 275.415 94.093 275.289 94.093 275.127 cv
f
104.139 267.78 mo
104.139 267.44 li
104.164 267.377 li
106.117 265.21 li
106.407 264.895 106.646 264.63 106.835 264.403 cv
107.012 264.189 107.201 263.937 107.377 263.66 cv
107.553 263.383 107.705 263.093 107.805 262.79 cv
107.906 262.501 107.969 262.186 107.969 261.858 cv
107.969 261.518 107.906 261.19 107.78 260.875 cv
107.654 260.56 107.465 260.308 107.213 260.119 cv
106.961 259.93 106.646 259.829 106.293 259.829 cv
105.928 259.829 105.6 259.943 105.311 260.157 cv
105.008 260.384 104.807 260.661 104.693 261.014 cv
104.832 261.001 li
105.008 261.001 105.172 261.064 105.311 261.19 cv
105.437 261.316 105.512 261.48 105.512 261.682 cv
105.512 261.883 105.437 262.047 105.311 262.173 cv
105.172 262.312 105.008 262.375 104.832 262.375 cv
104.63 262.375 104.466 262.312 104.34 262.173 cv
104.202 262.034 104.139 261.871 104.139 261.682 cv
104.139 261.379 104.189 261.077 104.315 260.8 cv
104.429 260.522 104.592 260.283 104.819 260.056 cv
105.046 259.842 105.298 259.678 105.575 259.565 cv
105.852 259.451 106.155 259.388 106.482 259.388 cv
106.961 259.388 107.402 259.489 107.818 259.691 cv
108.234 259.892 108.561 260.182 108.801 260.56 cv
109.04 260.938 109.166 261.367 109.166 261.858 cv
109.166 262.223 109.078 262.564 108.927 262.891 cv
108.763 263.219 108.561 263.521 108.309 263.786 cv
108.057 264.063 107.742 264.365 107.352 264.706 cv
106.961 265.046 106.709 265.273 106.583 265.386 cv
105.159 266.759 li
106.369 266.759 li
106.961 266.759 107.453 266.759 107.856 266.747 cv
108.259 266.747 108.473 266.722 108.498 266.696 cv
108.599 266.596 108.7 266.205 108.801 265.537 cv
109.166 265.537 li
108.813 267.78 li
104.139 267.78 li
f
116.74 279.915 mo
116.632 279.915 116.578 279.861 116.578 279.753 cv
116.614 279.645 li
118.666 277.629 119.692 274.749 119.692 270.933 cv
119.692 267.117 118.666 264.219 116.65 262.239 cv
116.578 262.095 li
116.632 261.987 li
116.74 261.933 li
116.902 261.933 li
116.992 261.969 li
117.856 262.653 118.576 263.481 119.152 264.453 cv
119.728 265.425 120.142 266.469 120.412 267.567 cv
120.664 268.665 120.808 269.781 120.808 270.933 cv
120.808 271.797 120.736 272.625 120.592 273.453 cv
120.448 274.281 120.214 275.073 119.908 275.865 cv
119.584 276.657 119.188 277.377 118.72 278.061 cv
118.234 278.745 117.658 279.339 116.992 279.879 cv
116.902 279.915 li
116.74 279.915 li
f
384.36 96.2137 mo
511.2 96.2137 li
511.2 50.4 li
384.36 50.4 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
384.36 96.2137 mo
511.2 96.2137 li
511.2 50.4 li
384.36 50.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
1 lj
394.44 61.7606 mo
414.6 61.7606 li
0 1 1 0 cmyk
@
gsave
390.19 66.0106 mo
398.69 66.0106 li
398.69 57.5106 li
390.19 57.5106 li
cp
clp
.5 lw
0 lc
394.44 65.7606 mo
395.501 65.7606 396.518 65.3392 397.268 64.5891 cv
398.019 63.8389 398.44 62.8214 398.44 61.7606 cv
398.44 60.6998 398.019 59.6823 397.268 58.9322 cv
396.518 58.1821 395.501 57.7606 394.44 57.7606 cv
393.379 57.7606 392.362 58.1821 391.612 58.9322 cv
390.861 59.6823 390.44 60.6998 390.44 61.7606 cv
390.44 62.8214 390.861 63.8389 391.612 64.5891 cv
392.362 65.3392 393.379 65.7606 394.44 65.7606 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
410.35 66.0106 mo
418.85 66.0106 li
418.85 57.5106 li
410.35 57.5106 li
cp
clp
.5 lw
0 lc
414.6 65.7606 mo
415.661 65.7606 416.678 65.3392 417.428 64.5891 cv
418.179 63.8389 418.6 62.8214 418.6 61.7606 cv
418.6 60.6998 418.179 59.6823 417.428 58.9322 cv
416.678 58.1821 415.661 57.7606 414.6 57.7606 cv
413.539 57.7606 412.522 58.1821 411.772 58.9322 cv
411.021 59.6823 410.6 60.6998 410.6 61.7606 cv
410.6 62.8214 411.021 63.8389 411.772 64.5891 cv
412.522 65.3392 413.539 65.7606 414.6 65.7606 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
431.218 66.0975 mo
431.102 65.9823 li
431.102 65.9679 li
431.117 65.9391 li
436.07 55.9455 li
436.114 55.8447 436.2 55.7871 436.33 55.7871 cv
436.531 55.7871 li
436.661 55.7871 436.747 55.8447 436.79 55.9455 cv
441.744 65.9391 li
441.758 65.9679 li
441.758 65.9823 li
441.643 66.0975 li
431.218 66.0975 li
432.168 64.9455 mo
439.757 64.9455 li
435.97 57.2991 li
432.168 64.9455 li
1 /0 /CSD get_res sepcs
1 sep
f
443.32 64.9311 mo
443.32 64.7871 443.335 64.6575 443.363 64.5279 cv
444.4 60.3951 li
442.888 60.3951 li
442.787 60.3951 442.744 60.3375 442.744 60.2079 cv
442.773 60.0063 442.845 59.8911 442.931 59.8911 cv
444.53 59.8911 li
445.106 57.5439 li
445.135 57.4287 445.207 57.3135 445.322 57.2271 cv
445.437 57.1407 445.567 57.0831 445.711 57.0831 cv
445.826 57.0831 445.927 57.1263 446.013 57.1983 cv
446.099 57.2703 446.143 57.3711 446.143 57.4863 cv
446.128 57.5583 li
446.128 57.6015 li
445.552 59.8911 li
447.035 59.8911 li
447.122 59.8911 447.18 59.9631 447.18 60.0783 cv
447.151 60.1935 li
447.093 60.3375 li
446.992 60.3951 li
445.423 60.3951 li
444.386 64.5567 li
444.314 64.8303 444.285 65.0607 444.285 65.2623 cv
444.285 65.6799 444.415 65.8815 444.703 65.8815 cv
445.12 65.8815 445.495 65.6943 445.826 65.2911 cv
446.143 64.8879 446.402 64.4559 446.575 63.9807 cv
446.69 63.8943 li
446.863 63.8943 li
446.949 63.9375 li
446.992 64.0239 li
446.978 64.0671 li
446.762 64.6431 446.46 65.1615 446.056 65.5935 cv
445.653 66.0255 445.192 66.2415 444.674 66.2415 cv
444.285 66.2415 443.968 66.1119 443.709 65.8815 cv
443.45 65.6367 443.32 65.3199 443.32 64.9311 cv
f
451.227 64.1823 mo
451.025 64.0959 li
450.953 63.8943 li
451.025 63.6927 li
451.227 63.6063 li
460.27 63.6063 li
460.443 63.6927 li
460.529 63.8943 li
460.443 64.0959 li
460.27 64.1823 li
451.227 64.1823 li
451.227 61.3887 mo
451.025 61.3023 li
450.953 61.1007 li
451.025 60.9135 li
451.227 60.8127 li
460.27 60.8127 li
460.443 60.9135 li
460.529 61.1007 li
460.443 61.3023 li
460.27 61.3887 li
451.227 61.3887 li
f
463.576 66.0975 mo
463.576 65.5935 li
464.771 65.5935 465.375 65.4495 465.375 65.1327 cv
465.375 57.5727 li
464.871 57.8175 464.238 57.9327 463.489 57.9327 cv
463.489 57.4287 li
464.655 57.4287 465.548 57.1263 466.153 56.5071 cv
466.355 56.5071 li
466.456 56.5503 li
466.499 56.6367 li
466.499 65.1327 li
466.499 65.4495 467.089 65.5935 468.299 65.5935 cv
468.299 66.0975 li
463.576 66.0975 li
f
470.108 66.0975 mo
470.008 66.0975 469.964 66.0399 469.964 65.9103 cv
469.993 65.7807 li
470.051 65.6511 li
470.152 65.5935 li
470.728 65.5935 471.145 65.5647 471.376 65.4927 cv
471.491 65.4639 471.592 65.3343 471.649 65.1039 cv
473.622 57.1983 li
473.651 56.9967 li
473.651 56.8959 473.593 56.8383 473.478 56.8239 cv
473.291 56.7951 472.945 56.7663 472.441 56.7663 cv
472.34 56.7663 472.297 56.7087 472.297 56.5791 cv
472.326 56.4495 li
472.384 56.3199 li
472.484 56.2623 li
480.289 56.2623 li
480.376 56.2623 480.433 56.3343 480.433 56.4495 cv
480.088 59.4303 li
480.03 59.5167 li
479.944 59.5599 li
479.814 59.5599 li
479.713 59.5599 479.67 59.5023 479.67 59.3727 cv
479.728 58.9119 479.756 58.5663 479.756 58.3359 cv
479.756 57.9615 479.684 57.6591 479.555 57.4431 cv
479.411 57.2271 479.238 57.0687 479.022 56.9823 cv
478.806 56.8959 478.561 56.8383 478.302 56.8095 cv
478.043 56.7807 477.697 56.7663 477.265 56.7663 cv
475.624 56.7663 li
475.364 56.7663 475.192 56.7951 475.105 56.8383 cv
475.019 56.8815 474.932 57.0255 474.875 57.2559 cv
474.011 60.7407 li
475.134 60.7407 li
475.624 60.7407 475.984 60.7119 476.243 60.6399 cv
476.488 60.5823 476.689 60.4383 476.833 60.2223 cv
476.977 60.0063 477.107 59.6607 477.222 59.1855 cv
477.265 59.0991 li
477.366 59.0559 li
477.496 59.0559 li
477.582 59.0559 477.64 59.1279 477.64 59.2431 cv
476.747 62.7999 li
476.603 62.9295 li
476.473 62.9295 li
476.372 62.9295 476.329 62.8719 476.329 62.7423 cv
476.416 62.3679 476.473 62.0799 476.473 61.8927 cv
476.473 61.6191 476.344 61.4463 476.084 61.3599 cv
475.825 61.2879 475.494 61.2447 475.076 61.2447 cv
473.881 61.2447 li
472.902 65.1615 li
472.859 65.2767 472.844 65.3919 472.844 65.4783 cv
472.844 65.5647 473.003 65.5935 473.334 65.5935 cv
475.076 65.5935 li
475.768 65.5935 476.329 65.5503 476.761 65.4351 cv
477.193 65.3199 477.539 65.1471 477.827 64.9167 cv
478.115 64.6863 478.36 64.3839 478.561 64.0095 cv
478.763 63.6495 479.022 63.1167 479.324 62.4111 cv
479.454 62.3247 li
479.584 62.3247 li
479.684 62.3823 li
479.728 62.4831 li
479.713 62.5407 li
478.23 66.0111 li
478.115 66.0975 li
470.108 66.0975 li
f
481.518 62.7855 mo
481.316 62.6991 li
481.244 62.4975 li
481.316 62.3103 li
481.518 62.2095 li
489.783 62.2095 li
489.97 62.3103 li
490.042 62.4975 li
489.97 62.6991 li
489.783 62.7855 li
481.518 62.7855 li
f
491.632 63.7215 mo
491.632 63.2175 li
496.081 56.5791 li
496.225 56.5071 li
496.441 56.5071 li
496.542 56.5071 496.6 56.5647 496.6 56.6655 cv
496.6 63.2175 li
498.011 63.2175 li
498.011 63.7215 li
496.6 63.7215 li
496.6 65.1327 li
496.6 65.3343 496.729 65.4639 497.017 65.5215 cv
497.305 65.5791 497.622 65.5935 497.996 65.5935 cv
497.996 66.0975 li
494.036 66.0975 li
494.036 65.5935 li
494.396 65.5935 494.713 65.5791 495.001 65.5215 cv
495.289 65.4639 495.433 65.3343 495.433 65.1327 cv
495.433 63.7215 li
491.632 63.7215 li
492.107 63.2175 mo
495.52 63.2175 li
495.52 58.1199 li
492.107 63.2175 li
f
499.676 65.2191 mo
499.936 65.6655 500.454 65.8815 501.232 65.8815 cv
501.563 65.8815 501.88 65.8239 502.182 65.7087 cv
502.484 65.5935 502.744 65.4207 502.945 65.1903 cv
503.147 64.9599 503.248 64.6863 503.248 64.3551 cv
503.248 64.1103 503.147 63.9087 502.974 63.7503 cv
502.801 63.5919 502.585 63.4767 502.326 63.4191 cv
501.548 63.2607 li
501.188 63.1743 500.9 63.0159 500.67 62.7711 cv
500.44 62.5263 500.324 62.2239 500.324 61.8783 cv
500.324 61.4607 500.44 61.0863 500.67 60.7551 cv
500.9 60.4239 501.203 60.1647 501.577 59.9919 cv
501.952 59.8191 502.355 59.7327 502.772 59.7327 cv
503.204 59.7327 503.593 59.8479 503.939 60.0495 cv
504.284 60.2655 504.457 60.5679 504.457 60.9711 cv
504.457 61.2015 504.385 61.3887 504.27 61.5615 cv
504.14 61.7343 503.968 61.8063 503.752 61.8063 cv
503.622 61.8063 503.507 61.7775 503.42 61.6911 cv
503.334 61.6047 503.291 61.5039 503.291 61.3743 cv
503.291 61.2591 503.32 61.1583 503.377 61.0431 cv
503.435 60.9423 503.521 60.8559 503.636 60.7983 cv
503.737 60.7407 503.852 60.6975 503.968 60.6975 cv
503.881 60.4959 503.723 60.3519 503.492 60.2511 cv
503.262 60.1647 503.003 60.1071 502.744 60.1071 cv
502.484 60.1071 502.24 60.1647 502.009 60.2511 cv
501.764 60.3519 501.563 60.4959 501.419 60.6831 cv
501.275 60.8847 501.203 61.1007 501.203 61.3599 cv
501.203 61.5327 501.26 61.6911 501.376 61.8207 cv
501.491 61.9503 501.649 62.0367 501.836 62.0943 cv
502.672 62.2671 li
502.931 62.3247 503.176 62.4255 503.406 62.5695 cv
503.622 62.7135 503.795 62.9007 503.924 63.1167 cv
504.054 63.3327 504.126 63.5775 504.126 63.8511 cv
504.126 64.2111 504.025 64.5711 503.824 64.9167 cv
503.622 65.2623 503.377 65.5359 503.089 65.7375 cv
502.571 66.0831 501.952 66.2415 501.217 66.2415 cv
500.699 66.2415 500.238 66.1263 499.806 65.8959 cv
499.374 65.6655 499.172 65.3199 499.172 64.8591 cv
499.172 64.5999 499.244 64.3839 499.388 64.1823 cv
499.532 63.9807 499.748 63.8799 500.022 63.8799 cv
500.166 63.8799 500.296 63.9375 500.411 64.0239 cv
500.512 64.1247 500.569 64.2543 500.569 64.3983 cv
500.569 64.6287 500.483 64.8159 500.324 64.9743 cv
500.152 65.1471 499.964 65.2191 499.748 65.2191 cv
499.676 65.2191 li
f
394.44 82.5075 mo
414.6 82.5075 li
.930816 .793027 0 0 cmyk
@
gsave
390.386 85.9936 mo
398.494 85.9936 li
398.494 78.2575 li
390.386 78.2575 li
cp
clp
.5 lw
0 lc
2 lj
394.44 78.5075 mo
393.542 81.2714 li
390.636 81.2714 li
392.987 82.9796 li
392.089 85.7436 li
394.44 84.0354 li
396.791 85.7436 li
395.893 82.9796 li
398.244 81.2714 li
395.338 81.2714 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
410.546 85.9936 mo
418.654 85.9936 li
418.654 78.2575 li
410.546 78.2575 li
cp
clp
.5 lw
0 lc
2 lj
414.6 78.5075 mo
413.702 81.2714 li
410.796 81.2714 li
413.147 82.9796 li
412.249 85.7436 li
414.6 84.0354 li
416.951 85.7436 li
416.053 82.9796 li
418.404 81.2714 li
415.498 81.2714 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
431.218 86.8444 mo
431.102 86.7292 li
431.102 86.7148 li
431.117 86.686 li
436.07 76.6924 li
436.114 76.5916 436.2 76.534 436.33 76.534 cv
436.531 76.534 li
436.661 76.534 436.747 76.5916 436.79 76.6924 cv
441.744 86.686 li
441.758 86.7148 li
441.758 86.7292 li
441.643 86.8444 li
431.218 86.8444 li
432.168 85.6924 mo
439.757 85.6924 li
435.97 78.046 li
432.168 85.6924 li
1 /0 /CSD get_res sepcs
1 sep
f
443.32 85.678 mo
443.32 85.534 443.335 85.4044 443.363 85.2748 cv
444.4 81.142 li
442.888 81.142 li
442.787 81.142 442.744 81.0844 442.744 80.9548 cv
442.773 80.7532 442.845 80.638 442.931 80.638 cv
444.53 80.638 li
445.106 78.2908 li
445.135 78.1756 445.207 78.0604 445.322 77.974 cv
445.437 77.8876 445.567 77.83 445.711 77.83 cv
445.826 77.83 445.927 77.8732 446.013 77.9452 cv
446.099 78.0172 446.143 78.118 446.143 78.2332 cv
446.128 78.3052 li
446.128 78.3484 li
445.552 80.638 li
447.035 80.638 li
447.122 80.638 447.18 80.71 447.18 80.8252 cv
447.151 80.9404 li
447.093 81.0844 li
446.992 81.142 li
445.423 81.142 li
444.386 85.3036 li
444.314 85.5772 444.285 85.8076 444.285 86.0092 cv
444.285 86.4268 444.415 86.6284 444.703 86.6284 cv
445.12 86.6284 445.495 86.4412 445.826 86.038 cv
446.143 85.6348 446.402 85.2028 446.575 84.7276 cv
446.69 84.6412 li
446.863 84.6412 li
446.949 84.6844 li
446.992 84.7708 li
446.978 84.814 li
446.762 85.39 446.46 85.9084 446.056 86.3404 cv
445.653 86.7724 445.192 86.9884 444.674 86.9884 cv
444.285 86.9884 443.968 86.8588 443.709 86.6284 cv
443.45 86.3836 443.32 86.0668 443.32 85.678 cv
f
451.227 84.9292 mo
451.025 84.8428 li
450.953 84.6412 li
451.025 84.4396 li
451.227 84.3532 li
460.27 84.3532 li
460.443 84.4396 li
460.529 84.6412 li
460.443 84.8428 li
460.27 84.9292 li
451.227 84.9292 li
451.227 82.1356 mo
451.025 82.0492 li
450.953 81.8476 li
451.025 81.6604 li
451.227 81.5596 li
460.27 81.5596 li
460.443 81.6604 li
460.529 81.8476 li
460.443 82.0492 li
460.27 82.1356 li
451.227 82.1356 li
f
462.956 86.8444 mo
462.956 86.4556 li
462.985 86.3836 li
465.217 83.9068 li
465.548 83.5468 465.822 83.2444 466.038 82.9852 cv
466.24 82.7404 466.456 82.4524 466.657 82.1356 cv
466.859 81.8188 467.031 81.4876 467.147 81.142 cv
467.262 80.8108 467.334 80.4508 467.334 80.0764 cv
467.334 79.6876 467.262 79.3132 467.118 78.9532 cv
466.974 78.5932 466.758 78.3052 466.47 78.0892 cv
466.182 77.8732 465.822 77.758 465.419 77.758 cv
465.001 77.758 464.627 77.8876 464.296 78.1324 cv
463.95 78.3916 463.719 78.7084 463.59 79.1116 cv
463.748 79.0972 li
463.95 79.0972 464.137 79.1692 464.296 79.3132 cv
464.439 79.4572 464.526 79.6444 464.526 79.8748 cv
464.526 80.1052 464.439 80.2924 464.296 80.4364 cv
464.137 80.5948 463.95 80.6668 463.748 80.6668 cv
463.518 80.6668 463.331 80.5948 463.187 80.4364 cv
463.028 80.278 462.956 80.0908 462.956 79.8748 cv
462.956 79.5292 463.014 79.1836 463.158 78.8668 cv
463.288 78.55 463.475 78.2764 463.734 78.0172 cv
463.993 77.7724 464.281 77.5852 464.598 77.4556 cv
464.915 77.326 465.26 77.254 465.635 77.254 cv
466.182 77.254 466.686 77.3692 467.161 77.5996 cv
467.636 77.83 468.011 78.1612 468.284 78.5932 cv
468.558 79.0252 468.702 79.5148 468.702 80.0764 cv
468.702 80.494 468.601 80.8828 468.428 81.2572 cv
468.241 81.6316 468.011 81.9772 467.723 82.2796 cv
467.435 82.5964 467.075 82.942 466.628 83.3308 cv
466.182 83.7196 465.894 83.9788 465.75 84.1084 cv
464.123 85.678 li
465.505 85.678 li
466.182 85.678 466.743 85.678 467.204 85.6636 cv
467.665 85.6636 467.91 85.6348 467.939 85.606 cv
468.054 85.4908 468.169 85.0444 468.284 84.2812 cv
468.702 84.2812 li
468.299 86.8444 li
462.956 86.8444 li
f
470.108 86.8444 mo
470.008 86.8444 469.964 86.7868 469.964 86.6572 cv
469.993 86.5276 li
470.051 86.398 li
470.152 86.3404 li
470.728 86.3404 471.145 86.3116 471.376 86.2396 cv
471.491 86.2108 471.592 86.0812 471.649 85.8508 cv
473.622 77.9452 li
473.651 77.7436 li
473.651 77.6428 473.593 77.5852 473.478 77.5708 cv
473.291 77.542 472.945 77.5132 472.441 77.5132 cv
472.34 77.5132 472.297 77.4556 472.297 77.326 cv
472.326 77.1964 li
472.384 77.0668 li
472.484 77.0092 li
480.289 77.0092 li
480.376 77.0092 480.433 77.0812 480.433 77.1964 cv
480.088 80.1772 li
480.03 80.2636 li
479.944 80.3068 li
479.814 80.3068 li
479.713 80.3068 479.67 80.2492 479.67 80.1196 cv
479.728 79.6588 479.756 79.3132 479.756 79.0828 cv
479.756 78.7084 479.684 78.406 479.555 78.19 cv
479.411 77.974 479.238 77.8156 479.022 77.7292 cv
478.806 77.6428 478.561 77.5852 478.302 77.5564 cv
478.043 77.5276 477.697 77.5132 477.265 77.5132 cv
475.624 77.5132 li
475.364 77.5132 475.192 77.542 475.105 77.5852 cv
475.019 77.6284 474.932 77.7724 474.875 78.0028 cv
474.011 81.4876 li
475.134 81.4876 li
475.624 81.4876 475.984 81.4588 476.243 81.3868 cv
476.488 81.3292 476.689 81.1852 476.833 80.9692 cv
476.977 80.7532 477.107 80.4076 477.222 79.9324 cv
477.265 79.846 li
477.366 79.8028 li
477.496 79.8028 li
477.582 79.8028 477.64 79.8748 477.64 79.99 cv
476.747 83.5468 li
476.603 83.6764 li
476.473 83.6764 li
476.372 83.6764 476.329 83.6188 476.329 83.4892 cv
476.416 83.1148 476.473 82.8268 476.473 82.6396 cv
476.473 82.366 476.344 82.1932 476.084 82.1068 cv
475.825 82.0348 475.494 81.9916 475.076 81.9916 cv
473.881 81.9916 li
472.902 85.9084 li
472.859 86.0236 472.844 86.1388 472.844 86.2252 cv
472.844 86.3116 473.003 86.3404 473.334 86.3404 cv
475.076 86.3404 li
475.768 86.3404 476.329 86.2972 476.761 86.182 cv
477.193 86.0668 477.539 85.894 477.827 85.6636 cv
478.115 85.4332 478.36 85.1308 478.561 84.7564 cv
478.763 84.3964 479.022 83.8636 479.324 83.158 cv
479.454 83.0716 li
479.584 83.0716 li
479.684 83.1292 li
479.728 83.23 li
479.713 83.2876 li
478.23 86.758 li
478.115 86.8444 li
470.108 86.8444 li
f
481.518 83.5324 mo
481.316 83.446 li
481.244 83.2444 li
481.316 83.0572 li
481.518 82.9564 li
489.783 82.9564 li
489.97 83.0572 li
490.042 83.2444 li
489.97 83.446 li
489.783 83.5324 li
481.518 83.5324 li
f
491.632 84.4684 mo
491.632 83.9644 li
496.081 77.326 li
496.225 77.254 li
496.441 77.254 li
496.542 77.254 496.6 77.3116 496.6 77.4124 cv
496.6 83.9644 li
498.011 83.9644 li
498.011 84.4684 li
496.6 84.4684 li
496.6 85.8796 li
496.6 86.0812 496.729 86.2108 497.017 86.2684 cv
497.305 86.326 497.622 86.3404 497.996 86.3404 cv
497.996 86.8444 li
494.036 86.8444 li
494.036 86.3404 li
494.396 86.3404 494.713 86.326 495.001 86.2684 cv
495.289 86.2108 495.433 86.0812 495.433 85.8796 cv
495.433 84.4684 li
491.632 84.4684 li
492.107 83.9644 mo
495.52 83.9644 li
495.52 78.8668 li
492.107 83.9644 li
f
499.676 85.966 mo
499.936 86.4124 500.454 86.6284 501.232 86.6284 cv
501.563 86.6284 501.88 86.5708 502.182 86.4556 cv
502.484 86.3404 502.744 86.1676 502.945 85.9372 cv
503.147 85.7068 503.248 85.4332 503.248 85.102 cv
503.248 84.8572 503.147 84.6556 502.974 84.4972 cv
502.801 84.3388 502.585 84.2236 502.326 84.166 cv
501.548 84.0076 li
501.188 83.9212 500.9 83.7628 500.67 83.518 cv
500.44 83.2732 500.324 82.9708 500.324 82.6252 cv
500.324 82.2076 500.44 81.8332 500.67 81.502 cv
500.9 81.1708 501.203 80.9116 501.577 80.7388 cv
501.952 80.566 502.355 80.4796 502.772 80.4796 cv
503.204 80.4796 503.593 80.5948 503.939 80.7964 cv
504.284 81.0124 504.457 81.3148 504.457 81.718 cv
504.457 81.9484 504.385 82.1356 504.27 82.3084 cv
504.14 82.4812 503.968 82.5532 503.752 82.5532 cv
503.622 82.5532 503.507 82.5244 503.42 82.438 cv
503.334 82.3516 503.291 82.2508 503.291 82.1212 cv
503.291 82.006 503.32 81.9052 503.377 81.79 cv
503.435 81.6892 503.521 81.6028 503.636 81.5452 cv
503.737 81.4876 503.852 81.4444 503.968 81.4444 cv
503.881 81.2428 503.723 81.0988 503.492 80.998 cv
503.262 80.9116 503.003 80.854 502.744 80.854 cv
502.484 80.854 502.24 80.9116 502.009 80.998 cv
501.764 81.0988 501.563 81.2428 501.419 81.43 cv
501.275 81.6316 501.203 81.8476 501.203 82.1068 cv
501.203 82.2796 501.26 82.438 501.376 82.5676 cv
501.491 82.6972 501.649 82.7836 501.836 82.8412 cv
502.672 83.014 li
502.931 83.0716 503.176 83.1724 503.406 83.3164 cv
503.622 83.4604 503.795 83.6476 503.924 83.8636 cv
504.054 84.0796 504.126 84.3244 504.126 84.598 cv
504.126 84.958 504.025 85.318 503.824 85.6636 cv
503.622 86.0092 503.377 86.2828 503.089 86.4844 cv
502.571 86.83 501.952 86.9884 501.217 86.9884 cv
500.699 86.9884 500.238 86.8732 499.806 86.6428 cv
499.374 86.4124 499.172 86.0668 499.172 85.606 cv
499.172 85.3468 499.244 85.1308 499.388 84.9292 cv
499.532 84.7276 499.748 84.6268 500.022 84.6268 cv
500.166 84.6268 500.296 84.6844 500.411 84.7708 cv
500.512 84.8716 500.569 85.0012 500.569 85.1452 cv
500.569 85.3756 500.483 85.5628 500.324 85.7212 cv
500.152 85.894 499.964 85.966 499.748 85.966 cv
499.676 85.966 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
