%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: dt_pc.pdf
%%Creator: (Adobe Acrobat 11.0.7)
%%For: qwang2
%%CreationDate: 12/31/15, 11:32 AM
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2015-12-11T15:15:40-06:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
gsave
0 432 mo
576 432 li
576 0 li
0 0 li
cp
clp
0 432 mo
576 432 li
576 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 336.782 mo
183.6 268.018 li
295.2 216 li
406.8 133.553 li
518.4 133.553 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
67.75 341.032 mo
76.25 341.032 li
76.25 332.532 li
67.75 332.532 li
cp
clp
72 340.782 mo
73.0608 340.782 74.0783 340.361 74.8284 339.61 cv
75.5785 338.86 76 337.843 76 336.782 cv
76 335.721 75.5785 334.704 74.8284 333.954 cv
74.0783 333.203 73.0608 332.782 72 332.782 cv
70.9392 332.782 69.9217 333.203 69.1716 333.954 cv
68.4215 334.704 68 335.721 68 336.782 cv
68 337.843 68.4215 338.86 69.1716 339.61 cv
69.9217 340.361 70.9392 340.782 72 340.782 cv
cp
f
.5 lw
0 lc
72 340.782 mo
73.0608 340.782 74.0783 340.361 74.8284 339.61 cv
75.5785 338.86 76 337.843 76 336.782 cv
76 335.721 75.5785 334.704 74.8284 333.954 cv
74.0783 333.203 73.0608 332.782 72 332.782 cv
70.9392 332.782 69.9217 333.203 69.1716 333.954 cv
68.4215 334.704 68 335.721 68 336.782 cv
68 337.843 68.4215 338.86 69.1716 339.61 cv
69.9217 340.361 70.9392 340.782 72 340.782 cv
cp
@
grestore
gsave
179.35 272.268 mo
187.85 272.268 li
187.85 263.768 li
179.35 263.768 li
cp
clp
183.6 272.018 mo
184.661 272.018 185.678 271.596 186.428 270.846 cv
187.179 270.096 187.6 269.079 187.6 268.018 cv
187.6 266.957 187.179 265.94 186.428 265.19 cv
185.678 264.439 184.661 264.018 183.6 264.018 cv
182.539 264.018 181.522 264.439 180.772 265.19 cv
180.021 265.94 179.6 266.957 179.6 268.018 cv
179.6 269.079 180.021 270.096 180.772 270.846 cv
181.522 271.596 182.539 272.018 183.6 272.018 cv
cp
f
.5 lw
0 lc
183.6 272.018 mo
184.661 272.018 185.678 271.596 186.428 270.846 cv
187.179 270.096 187.6 269.079 187.6 268.018 cv
187.6 266.957 187.179 265.94 186.428 265.19 cv
185.678 264.439 184.661 264.018 183.6 264.018 cv
182.539 264.018 181.522 264.439 180.772 265.19 cv
180.021 265.94 179.6 266.957 179.6 268.018 cv
179.6 269.079 180.021 270.096 180.772 270.846 cv
181.522 271.596 182.539 272.018 183.6 272.018 cv
cp
@
grestore
gsave
290.95 220.25 mo
299.45 220.25 li
299.45 211.75 li
290.95 211.75 li
cp
clp
295.2 220 mo
296.261 220 297.278 219.579 298.028 218.828 cv
298.779 218.078 299.2 217.061 299.2 216 cv
299.2 214.939 298.779 213.922 298.028 213.172 cv
297.278 212.421 296.261 212 295.2 212 cv
294.139 212 293.122 212.421 292.372 213.172 cv
291.621 213.922 291.2 214.939 291.2 216 cv
291.2 217.061 291.621 218.078 292.372 218.828 cv
293.122 219.579 294.139 220 295.2 220 cv
cp
f
.5 lw
0 lc
295.2 220 mo
296.261 220 297.278 219.579 298.028 218.828 cv
298.779 218.078 299.2 217.061 299.2 216 cv
299.2 214.939 298.779 213.922 298.028 213.172 cv
297.278 212.421 296.261 212 295.2 212 cv
294.139 212 293.122 212.421 292.372 213.172 cv
291.621 213.922 291.2 214.939 291.2 216 cv
291.2 217.061 291.621 218.078 292.372 218.828 cv
293.122 219.579 294.139 220 295.2 220 cv
cp
@
grestore
gsave
402.55 137.803 mo
411.05 137.803 li
411.05 129.303 li
402.55 129.303 li
cp
clp
406.8 137.553 mo
407.861 137.553 408.878 137.132 409.628 136.382 cv
410.379 135.632 410.8 134.614 410.8 133.553 cv
410.8 132.493 410.379 131.475 409.628 130.725 cv
408.878 129.975 407.861 129.553 406.8 129.553 cv
405.739 129.553 404.722 129.975 403.972 130.725 cv
403.221 131.475 402.8 132.493 402.8 133.553 cv
402.8 134.614 403.221 135.632 403.972 136.382 cv
404.722 137.132 405.739 137.553 406.8 137.553 cv
cp
f
.5 lw
0 lc
406.8 137.553 mo
407.861 137.553 408.878 137.132 409.628 136.382 cv
410.379 135.632 410.8 134.614 410.8 133.553 cv
410.8 132.493 410.379 131.475 409.628 130.725 cv
408.878 129.975 407.861 129.553 406.8 129.553 cv
405.739 129.553 404.722 129.975 403.972 130.725 cv
403.221 131.475 402.8 132.493 402.8 133.553 cv
402.8 134.614 403.221 135.632 403.972 136.382 cv
404.722 137.132 405.739 137.553 406.8 137.553 cv
cp
@
grestore
gsave
514.15 137.803 mo
522.65 137.803 li
522.65 129.303 li
514.15 129.303 li
cp
clp
518.4 137.553 mo
519.461 137.553 520.478 137.132 521.228 136.382 cv
521.979 135.632 522.4 134.614 522.4 133.553 cv
522.4 132.493 521.979 131.475 521.228 130.725 cv
520.478 129.975 519.461 129.553 518.4 129.553 cv
517.339 129.553 516.322 129.975 515.572 130.725 cv
514.821 131.475 514.4 132.493 514.4 133.553 cv
514.4 134.614 514.821 135.632 515.572 136.382 cv
516.322 137.132 517.339 137.553 518.4 137.553 cv
cp
f
.5 lw
0 lc
518.4 137.553 mo
519.461 137.553 520.478 137.132 521.228 136.382 cv
521.979 135.632 522.4 134.614 522.4 133.553 cv
522.4 132.493 521.979 131.475 521.228 130.725 cv
520.478 129.975 519.461 129.553 518.4 129.553 cv
517.339 129.553 516.322 129.975 515.572 130.725 cv
514.821 131.475 514.4 132.493 514.4 133.553 cv
514.4 134.614 514.821 135.632 515.572 136.382 cv
516.322 137.132 517.339 137.553 518.4 137.553 cv
cp
@
grestore
grestore
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 216 mo
183.6 163.982 li
295.2 163.982 li
406.8 111.964 li
518.4 133.553 li
/1 
[/DeviceCMYK] /CSA add_res
.930816 .793027 0 0 cmyk
@
gsave
67.75 220.25 mo
76.25 220.25 li
76.25 211.75 li
67.75 211.75 li
cp
clp
68 220 mo
76 220 li
76 212 li
68 212 li
cp
f
.5 lw
0 lc
0 lj
68 220 mo
76 220 li
76 212 li
68 212 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
179.35 168.232 mo
187.85 168.232 li
187.85 159.732 li
179.35 159.732 li
cp
clp
179.6 167.982 mo
187.6 167.982 li
187.6 159.982 li
179.6 159.982 li
cp
f
.5 lw
0 lc
0 lj
179.6 167.982 mo
187.6 167.982 li
187.6 159.982 li
179.6 159.982 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
290.95 168.232 mo
299.45 168.232 li
299.45 159.732 li
290.95 159.732 li
cp
clp
291.2 167.982 mo
299.2 167.982 li
299.2 159.982 li
291.2 159.982 li
cp
f
.5 lw
0 lc
0 lj
291.2 167.982 mo
299.2 167.982 li
299.2 159.982 li
291.2 159.982 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
402.55 116.214 mo
411.05 116.214 li
411.05 107.714 li
402.55 107.714 li
cp
clp
402.8 115.964 mo
410.8 115.964 li
410.8 107.964 li
402.8 107.964 li
cp
f
.5 lw
0 lc
0 lj
402.8 115.964 mo
410.8 115.964 li
410.8 107.964 li
402.8 107.964 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
514.15 137.803 mo
522.65 137.803 li
522.65 129.303 li
514.15 129.303 li
cp
clp
514.4 137.553 mo
522.4 137.553 li
522.4 129.553 li
514.4 129.553 li
cp
f
.5 lw
0 lc
0 lj
514.4 137.553 mo
522.4 137.553 li
522.4 129.553 li
514.4 129.553 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
72 43.2 mo
518.4 43.2 li
1 /0 /CSD get_res sepcs
1 sep
@
518.4 388.8 mo
518.4 43.2 li
@
72 388.8 mo
518.4 388.8 li
@
72 388.8 mo
72 43.2 li
@
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
.5 lw
0 lc
1 lj
[1 3 ] 0 dsh
72 388.8 mo
72 43.2 li
@
grestore
72 388.8 mo
72 384.8 li
f
.5 lw
0 lc
1 lj
72 388.8 mo
72 384.8 li
@
72 43.2 mo
72 47.2 li
f
72 43.2 mo
72 47.2 li
@
72.7926 393.957 mo
72.1806 393.957 71.7246 394.257 71.4126 394.857 cv
71.1006 395.457 70.9566 396.357 70.9566 397.557 cv
70.9566 398.757 71.1006 399.657 71.4126 400.257 cv
71.7246 400.857 72.1806 401.157 72.7926 401.157 cv
73.4046 401.157 73.8606 400.857 74.1726 400.257 cv
74.4726 399.657 74.6286 398.757 74.6286 397.557 cv
74.6286 396.357 74.4726 395.457 74.1726 394.857 cv
73.8606 394.257 73.4046 393.957 72.7926 393.957 cv
72.7926 393.021 mo
73.7646 393.021 74.5086 393.417 75.0366 394.185 cv
75.5526 394.965 75.8166 396.093 75.8166 397.557 cv
75.8166 399.033 75.5526 400.161 75.0366 400.929 cv
74.5086 401.697 73.7646 402.081 72.7926 402.081 cv
71.8086 402.081 71.0526 401.697 70.5366 400.929 cv
70.0206 400.161 69.7686 399.033 69.7686 397.557 cv
69.7686 396.093 70.0206 394.965 70.5366 394.185 cv
71.0526 393.417 71.8086 393.021 72.7926 393.021 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
183.6 388.8 mo
183.6 43.2 li
@
grestore
183.6 388.8 mo
183.6 384.8 li
f
183.6 388.8 mo
183.6 384.8 li
@
183.6 43.2 mo
183.6 47.2 li
f
183.6 43.2 mo
183.6 47.2 li
@
182.479 400.929 mo
184.411 400.929 li
184.411 394.257 li
182.311 394.677 li
182.311 393.597 li
184.399 393.177 li
185.587 393.177 li
185.587 400.929 li
187.519 400.929 li
187.519 401.925 li
182.479 401.925 li
182.479 400.929 li
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
295.2 388.8 mo
295.2 43.2 li
@
grestore
295.2 388.8 mo
295.2 384.8 li
f
295.2 388.8 mo
295.2 384.8 li
@
295.2 43.2 mo
295.2 47.2 li
f
295.2 43.2 mo
295.2 47.2 li
@
294.723 400.929 mo
298.851 400.929 li
298.851 401.925 li
293.295 401.925 li
293.295 400.929 li
293.739 400.473 294.351 399.849 295.131 399.057 cv
295.899 398.277 296.391 397.773 296.595 397.545 cv
296.979 397.125 297.243 396.765 297.387 396.465 cv
297.531 396.177 297.615 395.877 297.615 395.589 cv
297.615 395.133 297.447 394.749 297.123 394.461 cv
296.799 394.173 296.379 394.017 295.851 394.017 cv
295.479 394.017 295.083 394.089 294.675 394.209 cv
294.267 394.341 293.823 394.533 293.355 394.797 cv
293.355 393.597 li
293.835 393.405 294.279 393.261 294.687 393.165 cv
295.095 393.069 295.479 393.021 295.827 393.021 cv
296.727 393.021 297.447 393.249 297.987 393.705 cv
298.527 394.161 298.803 394.761 298.803 395.517 cv
298.803 395.877 298.731 396.225 298.599 396.537 cv
298.467 396.861 298.227 397.245 297.867 397.677 cv
297.771 397.797 297.459 398.121 296.931 398.661 cv
296.403 399.201 295.671 399.957 294.723 400.929 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
406.8 388.8 mo
406.8 43.2 li
@
grestore
406.8 388.8 mo
406.8 384.8 li
f
406.8 388.8 mo
406.8 384.8 li
@
406.8 43.2 mo
406.8 47.2 li
f
406.8 43.2 mo
406.8 47.2 li
@
408.797 397.209 mo
409.361 397.329 409.805 397.581 410.117 397.965 cv
410.429 398.349 410.597 398.829 410.597 399.381 cv
410.597 400.245 410.297 400.917 409.709 401.385 cv
409.109 401.853 408.269 402.081 407.177 402.081 cv
406.805 402.081 406.421 402.045 406.037 401.973 cv
405.653 401.913 405.245 401.805 404.837 401.661 cv
404.837 400.521 li
405.161 400.713 405.521 400.857 405.917 400.953 cv
406.301 401.049 406.709 401.097 407.141 401.097 cv
407.885 401.097 408.449 400.953 408.833 400.665 cv
409.217 400.377 409.421 399.945 409.421 399.381 cv
409.421 398.877 409.241 398.469 408.881 398.181 cv
408.521 397.893 408.017 397.737 407.369 397.737 cv
406.349 397.737 li
406.349 396.765 li
407.417 396.765 li
407.993 396.765 408.437 396.657 408.749 396.417 cv
409.061 396.189 409.217 395.853 409.217 395.409 cv
409.217 394.965 409.049 394.617 408.737 394.377 cv
408.413 394.137 407.957 394.017 407.369 394.017 cv
407.045 394.017 406.697 394.053 406.325 394.125 cv
405.953 394.197 405.545 394.305 405.101 394.449 cv
405.101 393.393 li
405.545 393.273 405.965 393.177 406.361 393.117 cv
406.745 393.057 407.117 393.021 407.477 393.021 cv
408.365 393.021 409.073 393.225 409.601 393.633 cv
410.129 394.041 410.393 394.593 410.393 395.289 cv
410.393 395.769 410.249 396.177 409.973 396.513 cv
409.697 396.849 409.301 397.089 408.797 397.209 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
518.4 388.8 mo
518.4 43.2 li
@
grestore
518.4 388.8 mo
518.4 384.8 li
f
518.4 388.8 mo
518.4 384.8 li
@
518.4 43.2 mo
518.4 47.2 li
f
518.4 43.2 mo
518.4 47.2 li
@
519.749 394.209 mo
516.76 398.877 li
519.749 398.877 li
519.749 394.209 li
519.437 393.177 mo
520.924 393.177 li
520.924 398.877 li
522.173 398.877 li
522.173 399.861 li
520.924 399.861 li
520.924 401.925 li
519.749 401.925 li
519.749 399.861 li
515.801 399.861 li
515.801 398.721 li
519.437 393.177 li
f
184.566 410.048 mo
187.226 410.048 li
193.686 422.248 li
193.686 410.048 li
195.606 410.048 li
195.606 424.628 li
192.946 424.628 li
186.486 412.428 li
186.486 424.628 li
184.566 424.628 li
184.566 410.048 li
f
199.266 420.308 mo
199.266 413.688 li
201.066 413.688 li
201.066 420.248 li
201.066 421.288 201.266 422.048 201.666 422.568 cv
202.066 423.088 202.666 423.348 203.486 423.348 cv
204.446 423.348 205.226 423.048 205.786 422.428 cv
206.346 421.808 206.626 420.968 206.626 419.888 cv
206.626 413.688 li
208.426 413.688 li
208.426 424.628 li
206.626 424.628 li
206.626 422.948 li
206.186 423.628 205.666 424.108 205.106 424.428 cv
204.526 424.728 203.866 424.888 203.106 424.888 cv
201.846 424.888 200.886 424.508 200.246 423.728 cv
199.586 422.968 199.266 421.828 199.266 420.308 cv
f
220.646 415.788 mo
221.086 414.988 221.626 414.408 222.246 414.008 cv
222.866 413.628 223.606 413.428 224.466 413.428 cv
225.586 413.428 226.466 413.828 227.086 414.628 cv
227.706 415.428 228.026 416.568 228.026 418.028 cv
228.026 424.628 li
226.226 424.628 li
226.226 418.088 li
226.226 417.048 226.026 416.268 225.666 415.748 cv
225.286 415.248 224.726 414.988 223.966 414.988 cv
223.026 414.988 222.286 415.308 221.746 415.928 cv
221.206 416.548 220.946 417.388 220.946 418.448 cv
220.946 424.628 li
219.146 424.628 li
219.146 418.088 li
219.146 417.048 218.946 416.268 218.586 415.748 cv
218.206 415.248 217.626 414.988 216.866 414.988 cv
215.946 414.988 215.206 415.308 214.666 415.928 cv
214.126 416.548 213.866 417.388 213.866 418.448 cv
213.866 424.628 li
212.066 424.628 li
212.066 413.688 li
213.866 413.688 li
213.866 415.388 li
214.266 414.728 214.766 414.228 215.346 413.908 cv
215.906 413.588 216.586 413.428 217.386 413.428 cv
218.186 413.428 218.846 413.628 219.406 414.028 cv
219.966 414.428 220.366 415.028 220.646 415.788 cv
f
239.466 419.168 mo
239.466 417.848 239.186 416.828 238.646 416.068 cv
238.086 415.308 237.346 414.928 236.406 414.928 cv
235.446 414.928 234.706 415.308 234.166 416.068 cv
233.606 416.828 233.346 417.848 233.346 419.168 cv
233.346 420.488 233.606 421.528 234.166 422.288 cv
234.706 423.048 235.446 423.408 236.406 423.408 cv
237.346 423.408 238.086 423.048 238.646 422.288 cv
239.186 421.528 239.466 420.488 239.466 419.168 cv
233.346 415.348 mo
233.706 414.708 234.186 414.228 234.766 413.908 cv
235.346 413.588 236.046 413.428 236.846 413.428 cv
238.166 413.428 239.246 413.968 240.086 415.008 cv
240.906 416.068 241.326 417.448 241.326 419.168 cv
241.326 420.888 240.906 422.288 240.086 423.328 cv
239.246 424.368 238.166 424.888 236.846 424.888 cv
236.046 424.888 235.346 424.728 234.766 424.428 cv
234.186 424.128 233.706 423.648 233.346 422.988 cv
233.346 424.628 li
231.546 424.628 li
231.546 409.428 li
233.346 409.428 li
233.346 415.348 li
f
253.666 418.708 mo
253.666 419.588 li
245.406 419.588 li
245.486 420.828 245.846 421.788 246.526 422.428 cv
247.186 423.068 248.106 423.388 249.306 423.388 cv
249.986 423.388 250.666 423.308 251.306 423.148 cv
251.946 422.988 252.606 422.728 253.246 422.368 cv
253.246 424.068 li
252.606 424.348 251.946 424.568 251.266 424.688 cv
250.586 424.808 249.886 424.888 249.206 424.888 cv
247.446 424.888 246.066 424.388 245.046 423.388 cv
244.026 422.388 243.526 421.008 243.526 419.268 cv
243.526 417.488 244.006 416.068 244.966 415.008 cv
245.926 413.968 247.246 413.428 248.886 413.428 cv
250.366 413.428 251.526 413.908 252.386 414.848 cv
253.226 415.808 253.666 417.088 253.666 418.708 cv
251.866 418.188 mo
251.846 417.208 251.566 416.428 251.046 415.828 cv
250.506 415.248 249.786 414.948 248.906 414.948 cv
247.906 414.948 247.106 415.248 246.506 415.808 cv
245.906 416.368 245.546 417.168 245.466 418.188 cv
251.866 418.188 li
f
262.946 415.368 mo
262.746 415.248 262.526 415.168 262.286 415.108 cv
262.046 415.068 261.786 415.028 261.506 415.028 cv
260.486 415.028 259.706 415.368 259.166 416.028 cv
258.606 416.688 258.346 417.628 258.346 418.868 cv
258.346 424.628 li
256.546 424.628 li
256.546 413.688 li
258.346 413.688 li
258.346 415.388 li
258.706 414.728 259.206 414.228 259.806 413.908 cv
260.406 413.588 261.146 413.428 262.026 413.428 cv
262.146 413.428 262.286 413.448 262.446 413.448 cv
262.586 413.468 262.746 413.488 262.946 413.528 cv
262.946 415.368 li
f
275.426 414.948 mo
274.466 414.948 273.706 415.328 273.146 416.088 cv
272.586 416.848 272.306 417.868 272.306 419.168 cv
272.306 420.488 272.566 421.508 273.126 422.268 cv
273.686 423.028 274.446 423.388 275.426 423.388 cv
276.386 423.388 277.146 423.028 277.706 422.268 cv
278.266 421.508 278.546 420.488 278.546 419.168 cv
278.546 417.888 278.266 416.848 277.706 416.088 cv
277.146 415.328 276.386 414.948 275.426 414.948 cv
275.426 413.428 mo
276.986 413.428 278.206 413.948 279.106 414.948 cv
279.986 415.968 280.446 417.368 280.446 419.168 cv
280.446 420.968 279.986 422.368 279.106 423.368 cv
278.206 424.388 276.986 424.888 275.426 424.888 cv
273.846 424.888 272.606 424.388 271.726 423.368 cv
270.846 422.368 270.406 420.968 270.406 419.168 cv
270.406 417.368 270.846 415.968 271.726 414.948 cv
272.606 413.948 273.846 413.428 275.426 413.428 cv
f
288.966 409.428 mo
288.966 410.928 li
287.246 410.928 li
286.606 410.928 286.146 411.068 285.906 411.328 cv
285.646 411.588 285.526 412.048 285.526 412.728 cv
285.526 413.688 li
288.486 413.688 li
288.486 415.088 li
285.526 415.088 li
285.526 424.628 li
283.726 424.628 li
283.726 415.088 li
282.006 415.088 li
282.006 413.688 li
283.726 413.688 li
283.726 412.928 li
283.726 411.728 284.006 410.828 284.566 410.268 cv
285.126 409.708 286.026 409.428 287.266 409.428 cv
288.966 409.428 li
f
307.826 411.168 mo
307.826 413.248 li
307.146 412.648 306.446 412.188 305.686 411.868 cv
304.926 411.568 304.146 411.408 303.306 411.408 cv
301.626 411.408 300.346 411.928 299.466 412.948 cv
298.586 413.968 298.146 415.428 298.146 417.348 cv
298.146 419.268 298.586 420.748 299.466 421.768 cv
300.346 422.788 301.626 423.288 303.306 423.288 cv
304.146 423.288 304.926 423.148 305.686 422.828 cv
306.446 422.528 307.146 422.068 307.826 421.448 cv
307.826 423.508 li
307.126 423.988 306.386 424.328 305.626 424.548 cv
304.866 424.768 304.046 424.888 303.186 424.888 cv
300.986 424.888 299.246 424.228 297.966 422.888 cv
296.686 421.548 296.066 419.708 296.066 417.348 cv
296.066 415.008 296.686 413.168 297.966 411.808 cv
299.246 410.468 300.986 409.788 303.186 409.788 cv
304.066 409.788 304.886 409.908 305.646 410.128 cv
306.406 410.368 307.146 410.708 307.826 411.168 cv
f
315.026 414.948 mo
314.066 414.948 313.306 415.328 312.746 416.088 cv
312.186 416.848 311.906 417.868 311.906 419.168 cv
311.906 420.488 312.166 421.508 312.726 422.268 cv
313.286 423.028 314.046 423.388 315.026 423.388 cv
315.986 423.388 316.746 423.028 317.306 422.268 cv
317.866 421.508 318.146 420.488 318.146 419.168 cv
318.146 417.888 317.866 416.848 317.306 416.088 cv
316.746 415.328 315.986 414.948 315.026 414.948 cv
315.026 413.428 mo
316.586 413.428 317.806 413.948 318.706 414.948 cv
319.586 415.968 320.046 417.368 320.046 419.168 cv
320.046 420.968 319.586 422.368 318.706 423.368 cv
317.806 424.388 316.586 424.888 315.026 424.888 cv
313.446 424.888 312.206 424.388 311.326 423.368 cv
310.446 422.368 310.006 420.968 310.006 419.168 cv
310.006 417.368 310.446 415.968 311.326 414.948 cv
312.206 413.948 313.446 413.428 315.026 413.428 cv
f
329.366 415.368 mo
329.166 415.248 328.946 415.168 328.706 415.108 cv
328.466 415.068 328.206 415.028 327.926 415.028 cv
326.906 415.028 326.126 415.368 325.586 416.028 cv
325.026 416.688 324.766 417.628 324.766 418.868 cv
324.766 424.628 li
322.966 424.628 li
322.966 413.688 li
324.766 413.688 li
324.766 415.388 li
325.126 414.728 325.626 414.228 326.226 413.908 cv
326.826 413.588 327.566 413.428 328.446 413.428 cv
328.566 413.428 328.706 413.448 328.866 413.448 cv
329.006 413.468 329.166 413.488 329.366 413.528 cv
329.366 415.368 li
f
337.586 415.368 mo
337.386 415.248 337.166 415.168 336.926 415.108 cv
336.686 415.068 336.426 415.028 336.146 415.028 cv
335.126 415.028 334.346 415.368 333.806 416.028 cv
333.246 416.688 332.986 417.628 332.986 418.868 cv
332.986 424.628 li
331.186 424.628 li
331.186 413.688 li
332.986 413.688 li
332.986 415.388 li
333.346 414.728 333.846 414.228 334.446 413.908 cv
335.046 413.588 335.786 413.428 336.666 413.428 cv
336.786 413.428 336.926 413.448 337.086 413.448 cv
337.226 413.468 337.386 413.488 337.586 413.528 cv
337.586 415.368 li
f
348.826 418.708 mo
348.826 419.588 li
340.566 419.588 li
340.646 420.828 341.006 421.788 341.686 422.428 cv
342.346 423.068 343.266 423.388 344.466 423.388 cv
345.146 423.388 345.826 423.308 346.466 423.148 cv
347.106 422.988 347.766 422.728 348.406 422.368 cv
348.406 424.068 li
347.766 424.348 347.106 424.568 346.426 424.688 cv
345.746 424.808 345.046 424.888 344.366 424.888 cv
342.606 424.888 341.226 424.388 340.206 423.388 cv
339.186 422.388 338.686 421.008 338.686 419.268 cv
338.686 417.488 339.166 416.068 340.126 415.008 cv
341.086 413.968 342.406 413.428 344.046 413.428 cv
345.526 413.428 346.686 413.908 347.546 414.848 cv
348.386 415.808 348.826 417.088 348.826 418.708 cv
347.026 418.188 mo
347.006 417.208 346.726 416.428 346.206 415.828 cv
345.666 415.248 344.946 414.948 344.066 414.948 cv
343.066 414.948 342.266 415.248 341.666 415.808 cv
341.066 416.368 340.706 417.168 340.626 418.188 cv
347.026 418.188 li
f
359.646 414.108 mo
359.646 415.788 li
359.126 415.508 358.626 415.308 358.106 415.168 cv
357.586 415.028 357.086 414.948 356.566 414.948 cv
355.406 414.948 354.486 415.328 353.846 416.068 cv
353.206 416.808 352.886 417.848 352.886 419.168 cv
352.886 420.508 353.206 421.548 353.846 422.288 cv
354.486 423.028 355.406 423.388 356.566 423.388 cv
357.086 423.388 357.586 423.328 358.106 423.188 cv
358.626 423.048 359.126 422.828 359.646 422.548 cv
359.646 424.208 li
359.126 424.448 358.606 424.628 358.086 424.728 cv
357.546 424.828 356.966 424.888 356.366 424.888 cv
354.726 424.888 353.406 424.388 352.446 423.348 cv
351.466 422.328 350.986 420.928 350.986 419.168 cv
350.986 417.388 351.466 415.988 352.446 414.968 cv
353.426 413.948 354.766 413.428 356.486 413.428 cv
357.046 413.428 357.586 413.488 358.106 413.608 cv
358.626 413.728 359.146 413.888 359.646 414.108 cv
f
364.546 410.588 mo
364.546 413.688 li
368.246 413.688 li
368.246 415.088 li
364.546 415.088 li
364.546 421.028 li
364.546 421.928 364.666 422.508 364.906 422.748 cv
365.146 423.008 365.646 423.128 366.406 423.128 cv
368.246 423.128 li
368.246 424.628 li
366.406 424.628 li
365.006 424.628 364.046 424.368 363.526 423.848 cv
363.006 423.328 362.746 422.388 362.746 421.028 cv
362.746 415.088 li
361.426 415.088 li
361.426 413.688 li
362.746 413.688 li
362.746 410.588 li
364.546 410.588 li
f
370.606 413.688 mo
372.406 413.688 li
372.406 424.628 li
370.606 424.628 li
370.606 413.688 li
370.606 409.428 mo
372.406 409.428 li
372.406 411.708 li
370.606 411.708 li
370.606 409.428 li
f
380.406 414.948 mo
379.446 414.948 378.686 415.328 378.126 416.088 cv
377.566 416.848 377.286 417.868 377.286 419.168 cv
377.286 420.488 377.546 421.508 378.106 422.268 cv
378.666 423.028 379.426 423.388 380.406 423.388 cv
381.366 423.388 382.126 423.028 382.686 422.268 cv
383.246 421.508 383.526 420.488 383.526 419.168 cv
383.526 417.888 383.246 416.848 382.686 416.088 cv
382.126 415.328 381.366 414.948 380.406 414.948 cv
380.406 413.428 mo
381.966 413.428 383.186 413.948 384.086 414.948 cv
384.966 415.968 385.426 417.368 385.426 419.168 cv
385.426 420.968 384.966 422.368 384.086 423.368 cv
383.186 424.388 381.966 424.888 380.406 424.888 cv
378.826 424.888 377.586 424.388 376.706 423.368 cv
375.826 422.368 375.386 420.968 375.386 419.168 cv
375.386 417.368 375.826 415.968 376.706 414.948 cv
377.586 413.948 378.826 413.428 380.406 413.428 cv
f
397.506 418.028 mo
397.506 424.628 li
395.706 424.628 li
395.706 418.088 li
395.706 417.048 395.486 416.288 395.086 415.768 cv
394.686 415.248 394.086 414.988 393.286 414.988 cv
392.306 414.988 391.546 415.308 390.986 415.928 cv
390.426 416.548 390.146 417.388 390.146 418.448 cv
390.146 424.628 li
388.346 424.628 li
388.346 413.688 li
390.146 413.688 li
390.146 415.388 li
390.566 414.748 391.066 414.248 391.666 413.928 cv
392.246 413.608 392.926 413.428 393.686 413.428 cv
394.926 413.428 395.886 413.828 396.526 414.608 cv
397.166 415.388 397.506 416.528 397.506 418.028 cv
f
408.066 414.008 mo
408.066 415.708 li
407.546 415.468 407.026 415.268 406.486 415.128 cv
405.926 415.008 405.366 414.928 404.786 414.928 cv
403.886 414.928 403.206 415.068 402.766 415.348 cv
402.326 415.628 402.106 416.028 402.106 416.568 cv
402.106 416.988 402.266 417.308 402.586 417.548 cv
402.906 417.788 403.546 418.028 404.506 418.228 cv
405.126 418.368 li
406.406 418.648 407.306 419.048 407.846 419.528 cv
408.366 420.028 408.646 420.728 408.646 421.608 cv
408.646 422.628 408.246 423.428 407.446 424.008 cv
406.646 424.608 405.526 424.888 404.126 424.888 cv
403.526 424.888 402.926 424.828 402.286 424.728 cv
401.646 424.628 400.986 424.468 400.286 424.228 cv
400.286 422.368 li
400.946 422.728 401.606 422.988 402.246 423.148 cv
402.886 423.328 403.526 423.408 404.166 423.408 cv
405.006 423.408 405.666 423.268 406.126 422.988 cv
406.566 422.708 406.806 422.288 406.806 421.748 cv
406.806 421.268 406.626 420.888 406.306 420.628 cv
405.986 420.368 405.266 420.108 404.146 419.868 cv
403.526 419.728 li
402.406 419.488 401.586 419.128 401.106 418.648 cv
400.606 418.168 400.366 417.508 400.366 416.648 cv
400.366 415.628 400.726 414.828 401.446 414.268 cv
402.166 413.708 403.206 413.428 404.566 413.428 cv
405.226 413.428 405.846 413.488 406.446 413.588 cv
407.026 413.688 407.566 413.828 408.066 414.008 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
72 388.8 mo
518.4 388.8 li
@
grestore
72 388.8 mo
76 388.8 li
f
72 388.8 mo
76 388.8 li
@
518.4 388.8 mo
514.4 388.8 li
f
518.4 388.8 mo
514.4 388.8 li
@
42.488 391.729 mo
44.42 391.729 li
44.42 385.057 li
42.32 385.477 li
42.32 384.397 li
44.408 383.977 li
45.596 383.977 li
45.596 391.729 li
47.528 391.729 li
47.528 392.725 li
42.488 392.725 li
42.488 391.729 li
f
52.4508 384.757 mo
51.8388 384.757 51.3828 385.057 51.0708 385.657 cv
50.7588 386.257 50.6148 387.157 50.6148 388.357 cv
50.6148 389.557 50.7588 390.457 51.0708 391.057 cv
51.3828 391.657 51.8388 391.957 52.4508 391.957 cv
53.0628 391.957 53.5188 391.657 53.8308 391.057 cv
54.1308 390.457 54.2868 389.557 54.2868 388.357 cv
54.2868 387.157 54.1308 386.257 53.8308 385.657 cv
53.5188 385.057 53.0628 384.757 52.4508 384.757 cv
52.4508 383.821 mo
53.4228 383.821 54.1668 384.217 54.6948 384.985 cv
55.2108 385.765 55.4748 386.893 55.4748 388.357 cv
55.4748 389.833 55.2108 390.961 54.6948 391.729 cv
54.1668 392.497 53.4228 392.881 52.4508 392.881 cv
51.4668 392.881 50.7108 392.497 50.1948 391.729 cv
49.6788 390.961 49.4268 389.833 49.4268 388.357 cv
49.4268 386.893 49.6788 385.765 50.1948 384.985 cv
50.7108 384.217 51.4668 383.821 52.4508 383.821 cv
f
56.6811 383.787 mo
58.8903 383.787 li
58.8903 384.459 li
56.6811 384.459 li
56.6811 383.787 li
f
62.4758 381.024 mo
60.3842 384.291 li
62.4758 384.291 li
62.4758 381.024 li
62.2574 380.301 mo
63.299 380.301 li
63.299 384.291 li
64.1726 384.291 li
64.1726 384.98 li
63.299 384.98 li
63.299 386.425 li
62.4758 386.425 li
62.4758 384.98 li
59.7122 384.98 li
59.7122 384.182 li
62.2574 380.301 li
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
72 216 mo
518.4 216 li
@
grestore
72 216 mo
76 216 li
f
72 216 mo
76 216 li
@
518.4 216 mo
514.4 216 li
f
518.4 216 mo
514.4 216 li
@
42.488 219.038 mo
44.42 219.038 li
44.42 212.366 li
42.32 212.786 li
42.32 211.706 li
44.408 211.286 li
45.596 211.286 li
45.596 219.038 li
47.528 219.038 li
47.528 220.034 li
42.488 220.034 li
42.488 219.038 li
f
52.4508 212.066 mo
51.8388 212.066 51.3828 212.366 51.0708 212.966 cv
50.7588 213.566 50.6148 214.466 50.6148 215.666 cv
50.6148 216.866 50.7588 217.766 51.0708 218.366 cv
51.3828 218.966 51.8388 219.266 52.4508 219.266 cv
53.0628 219.266 53.5188 218.966 53.8308 218.366 cv
54.1308 217.766 54.2868 216.866 54.2868 215.666 cv
54.2868 214.466 54.1308 213.566 53.8308 212.966 cv
53.5188 212.366 53.0628 212.066 52.4508 212.066 cv
52.4508 211.13 mo
53.4228 211.13 54.1668 211.526 54.6948 212.294 cv
55.2108 213.074 55.4748 214.202 55.4748 215.666 cv
55.4748 217.142 55.2108 218.27 54.6948 219.038 cv
54.1668 219.806 53.4228 220.19 52.4508 220.19 cv
51.4668 220.19 50.7108 219.806 50.1948 219.038 cv
49.6788 218.27 49.4268 217.142 49.4268 215.666 cv
49.4268 214.202 49.6788 213.074 50.1948 212.294 cv
50.7108 211.526 51.4668 211.13 52.4508 211.13 cv
f
56.6811 211.097 mo
58.8903 211.097 li
58.8903 211.769 li
56.6811 211.769 li
56.6811 211.097 li
f
62.711 210.433 mo
63.1058 210.517 63.4166 210.694 63.635 210.962 cv
63.8534 211.231 63.971 211.567 63.971 211.954 cv
63.971 212.558 63.761 213.029 63.3494 213.356 cv
62.9294 213.684 62.3414 213.844 61.577 213.844 cv
61.3166 213.844 61.0478 213.818 60.779 213.768 cv
60.5102 213.726 60.2246 213.65 59.939 213.55 cv
59.939 212.752 li
60.1658 212.886 60.4178 212.987 60.695 213.054 cv
60.9638 213.121 61.2494 213.155 61.5518 213.155 cv
62.0726 213.155 62.4674 213.054 62.7362 212.852 cv
63.005 212.651 63.1478 212.348 63.1478 211.954 cv
63.1478 211.601 63.0218 211.315 62.7698 211.114 cv
62.5178 210.912 62.165 210.803 61.7114 210.803 cv
60.9974 210.803 li
60.9974 210.122 li
61.745 210.122 li
62.1482 210.122 62.459 210.047 62.6774 209.879 cv
62.8958 209.719 63.005 209.484 63.005 209.173 cv
63.005 208.862 62.8874 208.619 62.669 208.451 cv
62.4422 208.283 62.123 208.199 61.7114 208.199 cv
61.4846 208.199 61.241 208.224 60.9806 208.274 cv
60.7202 208.325 60.4346 208.4 60.1238 208.501 cv
60.1238 207.762 li
60.4346 207.678 60.7286 207.611 61.0058 207.569 cv
61.2746 207.527 61.535 207.502 61.787 207.502 cv
62.4086 207.502 62.9042 207.644 63.2738 207.93 cv
63.6434 208.216 63.8282 208.602 63.8282 209.089 cv
63.8282 209.425 63.7274 209.711 63.5342 209.946 cv
63.341 210.181 63.0638 210.349 62.711 210.433 cv
f
gsave
72 388.8 mo
518.4 388.8 li
518.4 43.2 li
72 43.2 li
cp
clp
[1 3 ] 0 dsh
72 43.2 mo
518.4 43.2 li
@
grestore
72 43.2 mo
76 43.2 li
f
72 43.2 mo
76 43.2 li
@
518.4 43.2 mo
514.4 43.2 li
f
518.4 43.2 mo
514.4 43.2 li
@
42.488 46.2384 mo
44.42 46.2384 li
44.42 39.5664 li
42.32 39.9864 li
42.32 38.9064 li
44.408 38.4864 li
45.596 38.4864 li
45.596 46.2384 li
47.528 46.2384 li
47.528 47.2344 li
42.488 47.2344 li
42.488 46.2384 li
f
52.4508 39.2664 mo
51.8388 39.2664 51.3828 39.5664 51.0708 40.1664 cv
50.7588 40.7664 50.6148 41.6664 50.6148 42.8664 cv
50.6148 44.0664 50.7588 44.9664 51.0708 45.5664 cv
51.3828 46.1664 51.8388 46.4664 52.4508 46.4664 cv
53.0628 46.4664 53.5188 46.1664 53.8308 45.5664 cv
54.1308 44.9664 54.2868 44.0664 54.2868 42.8664 cv
54.2868 41.6664 54.1308 40.7664 53.8308 40.1664 cv
53.5188 39.5664 53.0628 39.2664 52.4508 39.2664 cv
52.4508 38.3304 mo
53.4228 38.3304 54.1668 38.7264 54.6948 39.4944 cv
55.2108 40.2744 55.4748 41.4024 55.4748 42.8664 cv
55.4748 44.3424 55.2108 45.4704 54.6948 46.2384 cv
54.1668 47.0064 53.4228 47.3904 52.4508 47.3904 cv
51.4668 47.3904 50.7108 47.0064 50.1948 46.2384 cv
49.6788 45.4704 49.4268 44.3424 49.4268 42.8664 cv
49.4268 41.4024 49.6788 40.2744 50.1948 39.4944 cv
50.7108 38.7264 51.4668 38.3304 52.4508 38.3304 cv
f
56.6811 38.2968 mo
58.8903 38.2968 li
58.8903 38.9688 li
56.6811 38.9688 li
56.6811 38.2968 li
f
60.9134 40.2372 mo
63.803 40.2372 li
63.803 40.9344 li
59.9138 40.9344 li
59.9138 40.2372 li
60.2246 39.918 60.653 39.4812 61.199 38.9268 cv
61.7366 38.3808 62.081 38.028 62.2238 37.8684 cv
62.4926 37.5744 62.6774 37.3224 62.7782 37.1124 cv
62.879 36.9108 62.9378 36.7008 62.9378 36.4992 cv
62.9378 36.18 62.8202 35.9112 62.5934 35.7096 cv
62.3666 35.508 62.0726 35.3988 61.703 35.3988 cv
61.4426 35.3988 61.1654 35.4492 60.8798 35.5332 cv
60.5942 35.6256 60.2834 35.76 59.9558 35.9448 cv
59.9558 35.1048 li
60.2918 34.9704 60.6026 34.8696 60.8882 34.8024 cv
61.1738 34.7352 61.4426 34.7016 61.6862 34.7016 cv
62.3162 34.7016 62.8202 34.8612 63.1982 35.1804 cv
63.5762 35.4996 63.7694 35.9196 63.7694 36.4488 cv
63.7694 36.7008 63.719 36.9444 63.6266 37.1628 cv
63.5342 37.3896 63.3662 37.6584 63.1142 37.9608 cv
63.047 38.0448 62.8286 38.2716 62.459 38.6496 cv
62.0894 39.0276 61.577 39.5568 60.9134 40.2372 cv
f
72 336.782 mo
74 336.782 li
f
72 336.782 mo
74 336.782 li
@
518.4 336.782 mo
516.4 336.782 li
f
518.4 336.782 mo
516.4 336.782 li
@
72 306.353 mo
74 306.353 li
f
72 306.353 mo
74 306.353 li
@
518.4 306.353 mo
516.4 306.353 li
f
518.4 306.353 mo
516.4 306.353 li
@
72 284.764 mo
74 284.764 li
f
72 284.764 mo
74 284.764 li
@
518.4 284.764 mo
516.4 284.764 li
f
518.4 284.764 mo
516.4 284.764 li
@
72 268.018 mo
74 268.018 li
f
72 268.018 mo
74 268.018 li
@
518.4 268.018 mo
516.4 268.018 li
f
518.4 268.018 mo
516.4 268.018 li
@
72 254.335 mo
74 254.335 li
f
72 254.335 mo
74 254.335 li
@
518.4 254.335 mo
516.4 254.335 li
f
518.4 254.335 mo
516.4 254.335 li
@
72 242.767 mo
74 242.767 li
f
72 242.767 mo
74 242.767 li
@
518.4 242.767 mo
516.4 242.767 li
f
518.4 242.767 mo
516.4 242.767 li
@
72 232.746 mo
74 232.746 li
f
72 232.746 mo
74 232.746 li
@
518.4 232.746 mo
516.4 232.746 li
f
518.4 232.746 mo
516.4 232.746 li
@
72 223.907 mo
74 223.907 li
f
72 223.907 mo
74 223.907 li
@
518.4 223.907 mo
516.4 223.907 li
f
518.4 223.907 mo
516.4 223.907 li
@
72 163.982 mo
74 163.982 li
f
72 163.982 mo
74 163.982 li
@
518.4 163.982 mo
516.4 163.982 li
f
518.4 163.982 mo
516.4 163.982 li
@
72 133.553 mo
74 133.553 li
f
72 133.553 mo
74 133.553 li
@
518.4 133.553 mo
516.4 133.553 li
f
518.4 133.553 mo
516.4 133.553 li
@
72 111.964 mo
74 111.964 li
f
72 111.964 mo
74 111.964 li
@
518.4 111.964 mo
516.4 111.964 li
f
518.4 111.964 mo
516.4 111.964 li
@
72 95.218 mo
74 95.218 li
f
72 95.218 mo
74 95.218 li
@
518.4 95.218 mo
516.4 95.218 li
f
518.4 95.218 mo
516.4 95.218 li
@
72 81.5355 mo
74 81.5355 li
f
72 81.5355 mo
74 81.5355 li
@
518.4 81.5355 mo
516.4 81.5355 li
f
518.4 81.5355 mo
516.4 81.5355 li
@
72 69.9671 mo
74 69.9671 li
f
72 69.9671 mo
74 69.9671 li
@
518.4 69.9671 mo
516.4 69.9671 li
f
518.4 69.9671 mo
516.4 69.9671 li
@
72 59.946 mo
74 59.946 li
f
72 59.946 mo
74 59.946 li
@
518.4 59.946 mo
516.4 59.946 li
f
518.4 59.946 mo
516.4 59.946 li
@
72 51.1069 mo
74 51.1069 li
f
72 51.1069 mo
74 51.1069 li
@
518.4 51.1069 mo
516.4 51.1069 li
f
518.4 51.1069 mo
516.4 51.1069 li
@
17.2637 358.392 mo
17.2637 355.452 li
27.1838 351.732 li
17.2637 347.992 li
17.2637 345.052 li
31.8438 345.052 li
31.8438 346.972 li
19.0437 346.972 li
29.0438 350.732 li
29.0438 352.712 li
19.0437 356.472 li
31.8438 356.472 li
31.8438 358.392 li
17.2637 358.392 li
f
26.3438 336.231 mo
26.3438 337.691 26.5238 338.691 26.8438 339.251 cv
27.1838 339.811 27.7437 340.091 28.5438 340.091 cv
29.1838 340.091 29.7038 339.891 30.0637 339.471 cv
30.4438 339.051 30.6238 338.471 30.6238 337.751 cv
30.6238 336.751 30.2838 335.951 29.5637 335.351 cv
28.8638 334.751 27.9237 334.451 26.7437 334.451 cv
26.3438 334.451 li
26.3438 336.231 li
25.6038 332.651 mo
31.8438 332.651 li
31.8438 334.451 li
30.1838 334.451 li
30.8638 334.871 31.3438 335.391 31.6437 335.991 cv
31.9438 336.591 32.1037 337.351 32.1037 338.231 cv
32.1037 339.351 31.8037 340.251 31.1838 340.911 cv
30.5637 341.571 29.7237 341.891 28.6637 341.891 cv
27.4438 341.891 26.5238 341.491 25.8837 340.651 cv
25.2638 339.831 24.9437 338.611 24.9437 336.971 cv
24.9437 334.451 li
24.7638 334.451 li
23.9437 334.451 23.3037 334.731 22.8438 335.271 cv
22.4037 335.811 22.1637 336.571 22.1637 337.551 cv
22.1637 338.191 22.2437 338.791 22.4037 339.391 cv
22.5637 339.991 22.7837 340.551 23.0637 341.091 cv
21.4037 341.091 li
21.1637 340.451 20.9637 339.811 20.8438 339.191 cv
20.7237 338.571 20.6437 337.971 20.6437 337.371 cv
20.6437 335.791 21.0637 334.611 21.8837 333.831 cv
22.7038 333.051 23.9437 332.651 25.6038 332.651 cv
f
20.9037 319.851 mo
26.2237 323.811 li
31.8438 319.651 li
31.8438 321.771 li
27.5438 324.951 li
31.8438 328.131 li
31.8438 330.251 li
26.1237 326.011 li
20.9037 329.891 li
20.9037 327.771 li
24.8037 324.871 li
20.9037 321.971 li
20.9037 319.851 li
f
20.9037 317.111 mo
20.9037 315.311 li
31.8438 315.311 li
31.8438 317.111 li
20.9037 317.111 li
16.6437 317.111 mo
16.6437 315.311 li
18.9237 315.311 li
18.9237 317.111 li
16.6437 317.111 li
f
23.0037 303.031 mo
22.2038 302.591 21.6237 302.051 21.2237 301.431 cv
20.8438 300.811 20.6437 300.071 20.6437 299.211 cv
20.6437 298.091 21.0437 297.211 21.8438 296.591 cv
22.6437 295.971 23.7837 295.651 25.2437 295.651 cv
31.8438 295.651 li
31.8438 297.451 li
25.3037 297.451 li
24.2638 297.451 23.4837 297.651 22.9637 298.011 cv
22.4637 298.391 22.2038 298.951 22.2038 299.711 cv
22.2038 300.651 22.5238 301.391 23.1437 301.931 cv
23.7637 302.471 24.6037 302.731 25.6637 302.731 cv
31.8438 302.731 li
31.8438 304.531 li
25.3037 304.531 li
24.2638 304.531 23.4837 304.731 22.9637 305.091 cv
22.4637 305.471 22.2038 306.051 22.2038 306.811 cv
22.2038 307.731 22.5238 308.471 23.1437 309.011 cv
23.7637 309.551 24.6037 309.811 25.6637 309.811 cv
31.8438 309.811 li
31.8438 311.611 li
20.9037 311.611 li
20.9037 309.811 li
22.6037 309.811 li
21.9437 309.411 21.4437 308.911 21.1237 308.331 cv
20.8037 307.771 20.6437 307.091 20.6437 306.291 cv
20.6437 305.491 20.8438 304.831 21.2437 304.271 cv
21.6437 303.711 22.2437 303.311 23.0037 303.031 cv
f
27.5238 292.251 mo
20.9037 292.251 li
20.9037 290.451 li
27.4637 290.451 li
28.5037 290.451 29.2638 290.251 29.7838 289.851 cv
30.3037 289.451 30.5637 288.851 30.5637 288.031 cv
30.5637 287.071 30.2638 286.291 29.6437 285.731 cv
29.0238 285.171 28.1838 284.891 27.1038 284.891 cv
20.9037 284.891 li
20.9037 283.091 li
31.8438 283.091 li
31.8438 284.891 li
30.1637 284.891 li
30.8438 285.331 31.3237 285.851 31.6437 286.411 cv
31.9438 286.991 32.1037 287.651 32.1037 288.411 cv
32.1037 289.671 31.7237 290.631 30.9438 291.271 cv
30.1838 291.931 29.0438 292.251 27.5238 292.251 cv
f
23.0037 270.871 mo
22.2038 270.431 21.6237 269.891 21.2237 269.271 cv
20.8438 268.651 20.6437 267.911 20.6437 267.051 cv
20.6437 265.931 21.0437 265.051 21.8438 264.431 cv
22.6437 263.811 23.7837 263.491 25.2437 263.491 cv
31.8438 263.491 li
31.8438 265.291 li
25.3037 265.291 li
24.2638 265.291 23.4837 265.491 22.9637 265.851 cv
22.4637 266.231 22.2038 266.791 22.2038 267.551 cv
22.2038 268.491 22.5238 269.231 23.1437 269.771 cv
23.7637 270.311 24.6037 270.571 25.6637 270.571 cv
31.8438 270.571 li
31.8438 272.371 li
25.3037 272.371 li
24.2638 272.371 23.4837 272.571 22.9637 272.931 cv
22.4637 273.311 22.2038 273.891 22.2038 274.651 cv
22.2038 275.571 22.5238 276.311 23.1437 276.851 cv
23.7637 277.391 24.6037 277.651 25.6637 277.651 cv
31.8438 277.651 li
31.8438 279.451 li
20.9037 279.451 li
20.9037 277.651 li
22.6037 277.651 li
21.9437 277.251 21.4437 276.751 21.1237 276.171 cv
20.8037 275.611 20.6437 274.931 20.6437 274.131 cv
20.6437 273.331 20.8438 272.671 21.2437 272.111 cv
21.6437 271.551 22.2437 271.151 23.0037 270.871 cv
f
17.8037 251.772 mo
20.9037 251.772 li
20.9037 248.072 li
22.3037 248.072 li
22.3037 251.772 li
28.2437 251.772 li
29.1437 251.772 29.7237 251.652 29.9637 251.412 cv
30.2237 251.172 30.3438 250.672 30.3438 249.912 cv
30.3438 248.072 li
31.8438 248.072 li
31.8438 249.912 li
31.8438 251.312 31.5837 252.272 31.0637 252.792 cv
30.5438 253.312 29.6038 253.572 28.2437 253.572 cv
22.3037 253.572 li
22.3037 254.892 li
20.9037 254.892 li
20.9037 253.572 li
17.8037 253.572 li
17.8037 251.772 li
f
20.9037 245.712 mo
20.9037 243.912 li
31.8438 243.912 li
31.8438 245.712 li
20.9037 245.712 li
16.6437 245.712 mo
16.6437 243.912 li
18.9237 243.912 li
18.9237 245.712 li
16.6437 245.712 li
f
23.0037 231.632 mo
22.2038 231.192 21.6237 230.652 21.2237 230.032 cv
20.8438 229.412 20.6437 228.672 20.6437 227.812 cv
20.6437 226.692 21.0437 225.812 21.8438 225.192 cv
22.6437 224.572 23.7837 224.252 25.2437 224.252 cv
31.8438 224.252 li
31.8438 226.052 li
25.3037 226.052 li
24.2638 226.052 23.4837 226.252 22.9637 226.612 cv
22.4637 226.992 22.2038 227.552 22.2038 228.312 cv
22.2038 229.252 22.5238 229.992 23.1437 230.532 cv
23.7637 231.072 24.6037 231.332 25.6637 231.332 cv
31.8438 231.332 li
31.8438 233.132 li
25.3037 233.132 li
24.2638 233.132 23.4837 233.332 22.9637 233.692 cv
22.4637 234.072 22.2038 234.652 22.2038 235.412 cv
22.2038 236.332 22.5238 237.072 23.1437 237.612 cv
23.7637 238.152 24.6037 238.412 25.6637 238.412 cv
31.8438 238.412 li
31.8438 240.212 li
20.9037 240.212 li
20.9037 238.412 li
22.6037 238.412 li
21.9437 238.012 21.4437 237.512 21.1237 236.932 cv
20.8037 236.372 20.6437 235.692 20.6437 234.892 cv
20.6437 234.092 20.8438 233.432 21.2437 232.872 cv
21.6437 232.312 22.2437 231.912 23.0037 231.632 cv
f
25.9237 211.312 mo
26.8037 211.312 li
26.8037 219.572 li
28.0438 219.492 29.0037 219.132 29.6437 218.452 cv
30.2838 217.792 30.6038 216.872 30.6038 215.672 cv
30.6038 214.992 30.5238 214.312 30.3638 213.672 cv
30.2038 213.032 29.9438 212.372 29.5837 211.732 cv
31.2838 211.732 li
31.5637 212.372 31.7838 213.032 31.9037 213.712 cv
32.0238 214.392 32.1037 215.092 32.1037 215.772 cv
32.1037 217.532 31.6038 218.912 30.6038 219.932 cv
29.6038 220.952 28.2237 221.452 26.4837 221.452 cv
24.7038 221.452 23.2837 220.972 22.2237 220.012 cv
21.1838 219.052 20.6437 217.732 20.6437 216.092 cv
20.6437 214.612 21.1237 213.452 22.0637 212.592 cv
23.0238 211.752 24.3037 211.312 25.9237 211.312 cv
25.4037 213.112 mo
24.4237 213.132 23.6437 213.412 23.0438 213.932 cv
22.4637 214.472 22.1637 215.192 22.1637 216.072 cv
22.1637 217.072 22.4637 217.872 23.0238 218.472 cv
23.5837 219.072 24.3837 219.432 25.4037 219.512 cv
25.4037 213.112 li
f
20.9037 202.012 mo
20.9037 200.212 li
31.8438 200.212 li
31.8438 202.012 li
20.9037 202.012 li
16.6437 202.012 mo
16.6437 200.212 li
18.9237 200.212 li
18.9237 202.012 li
16.6437 202.012 li
f
25.2437 187.352 mo
31.8438 187.352 li
31.8438 189.152 li
25.3037 189.152 li
24.2638 189.152 23.5037 189.372 22.9837 189.772 cv
22.4637 190.172 22.2038 190.772 22.2038 191.572 cv
22.2038 192.552 22.5238 193.312 23.1437 193.872 cv
23.7637 194.432 24.6037 194.712 25.6637 194.712 cv
31.8438 194.712 li
31.8438 196.512 li
20.9037 196.512 li
20.9037 194.712 li
22.6037 194.712 li
21.9637 194.292 21.4637 193.792 21.1437 193.192 cv
20.8237 192.612 20.6437 191.932 20.6437 191.172 cv
20.6437 189.932 21.0437 188.972 21.8237 188.332 cv
22.6037 187.692 23.7437 187.352 25.2437 187.352 cv
f
21.3237 175.892 mo
23.0037 175.892 li
22.7237 176.412 22.5238 176.912 22.3837 177.432 cv
22.2437 177.952 22.1637 178.452 22.1637 178.972 cv
22.1637 180.132 22.5438 181.052 23.2837 181.692 cv
24.0238 182.332 25.0637 182.652 26.3837 182.652 cv
27.7237 182.652 28.7638 182.332 29.5037 181.692 cv
30.2437 181.052 30.6038 180.132 30.6038 178.972 cv
30.6038 178.452 30.5438 177.952 30.4037 177.432 cv
30.2638 176.912 30.0438 176.412 29.7638 175.892 cv
31.4237 175.892 li
31.6637 176.412 31.8438 176.932 31.9438 177.452 cv
32.0438 177.992 32.1037 178.572 32.1037 179.172 cv
32.1037 180.812 31.6038 182.132 30.5637 183.092 cv
29.5438 184.072 28.1437 184.552 26.3837 184.552 cv
24.6037 184.552 23.2038 184.072 22.1838 183.092 cv
21.1637 182.112 20.6437 180.772 20.6437 179.052 cv
20.6437 178.492 20.7038 177.952 20.8237 177.432 cv
20.9437 176.912 21.1037 176.392 21.3237 175.892 cv
f
22.5837 166.431 mo
22.4637 166.631 22.3837 166.851 22.3237 167.091 cv
22.2837 167.331 22.2437 167.591 22.2437 167.871 cv
22.2437 168.891 22.5837 169.671 23.2437 170.211 cv
23.9037 170.771 24.8438 171.031 26.0837 171.031 cv
31.8438 171.031 li
31.8438 172.831 li
20.9037 172.831 li
20.9037 171.031 li
22.6037 171.031 li
21.9437 170.671 21.4437 170.171 21.1237 169.571 cv
20.8037 168.971 20.6437 168.231 20.6437 167.351 cv
20.6437 167.231 20.6637 167.091 20.6637 166.931 cv
20.6838 166.791 20.7038 166.631 20.7437 166.431 cv
22.5837 166.431 li
f
25.9237 155.192 mo
26.8037 155.192 li
26.8037 163.452 li
28.0438 163.372 29.0037 163.012 29.6437 162.332 cv
30.2838 161.672 30.6038 160.752 30.6038 159.552 cv
30.6038 158.872 30.5238 158.192 30.3638 157.552 cv
30.2038 156.912 29.9438 156.252 29.5837 155.612 cv
31.2838 155.612 li
31.5637 156.252 31.7838 156.912 31.9037 157.592 cv
32.0238 158.272 32.1037 158.972 32.1037 159.652 cv
32.1037 161.412 31.6038 162.792 30.6038 163.812 cv
29.6038 164.832 28.2237 165.332 26.4837 165.332 cv
24.7038 165.332 23.2837 164.852 22.2237 163.892 cv
21.1838 162.932 20.6437 161.612 20.6437 159.972 cv
20.6437 158.492 21.1237 157.332 22.0637 156.472 cv
23.0238 155.632 24.3037 155.192 25.9237 155.192 cv
25.4037 156.992 mo
24.4237 157.012 23.6437 157.292 23.0438 157.812 cv
22.4637 158.352 22.1637 159.072 22.1637 159.952 cv
22.1637 160.952 22.4637 161.752 23.0238 162.352 cv
23.5837 162.952 24.3837 163.312 25.4037 163.392 cv
25.4037 156.992 li
f
23.0037 143.731 mo
22.2038 143.291 21.6237 142.751 21.2237 142.131 cv
20.8438 141.511 20.6437 140.771 20.6437 139.911 cv
20.6437 138.791 21.0437 137.911 21.8438 137.291 cv
22.6437 136.671 23.7837 136.351 25.2437 136.351 cv
31.8438 136.351 li
31.8438 138.151 li
25.3037 138.151 li
24.2638 138.151 23.4837 138.351 22.9637 138.711 cv
22.4637 139.091 22.2038 139.651 22.2038 140.411 cv
22.2038 141.351 22.5238 142.091 23.1437 142.631 cv
23.7637 143.171 24.6037 143.431 25.6637 143.431 cv
31.8438 143.431 li
31.8438 145.231 li
25.3037 145.231 li
24.2638 145.231 23.4837 145.431 22.9637 145.791 cv
22.4637 146.171 22.2038 146.751 22.2038 147.511 cv
22.2038 148.431 22.5238 149.171 23.1437 149.711 cv
23.7637 150.251 24.6037 150.511 25.6637 150.511 cv
31.8438 150.511 li
31.8438 152.311 li
20.9037 152.311 li
20.9037 150.511 li
22.6037 150.511 li
21.9437 150.111 21.4437 149.611 21.1237 149.031 cv
20.8037 148.471 20.6437 147.791 20.6437 146.991 cv
20.6437 146.191 20.8438 145.531 21.2437 144.971 cv
21.6437 144.411 22.2437 144.011 23.0037 143.731 cv
f
25.9237 123.411 mo
26.8037 123.411 li
26.8037 131.671 li
28.0438 131.591 29.0037 131.231 29.6437 130.551 cv
30.2838 129.891 30.6038 128.971 30.6038 127.771 cv
30.6038 127.091 30.5238 126.411 30.3638 125.771 cv
30.2038 125.131 29.9438 124.471 29.5837 123.831 cv
31.2838 123.831 li
31.5637 124.471 31.7838 125.131 31.9037 125.811 cv
32.0238 126.491 32.1037 127.191 32.1037 127.871 cv
32.1037 129.631 31.6038 131.011 30.6038 132.031 cv
29.6038 133.051 28.2237 133.551 26.4837 133.551 cv
24.7038 133.551 23.2837 133.071 22.2237 132.111 cv
21.1838 131.151 20.6437 129.831 20.6437 128.191 cv
20.6437 126.711 21.1237 125.551 22.0637 124.691 cv
23.0238 123.851 24.3037 123.411 25.9237 123.411 cv
25.4037 125.211 mo
24.4237 125.231 23.6437 125.511 23.0438 126.031 cv
22.4637 126.571 22.1637 127.291 22.1637 128.171 cv
22.1637 129.171 22.4637 129.971 23.0238 130.571 cv
23.5837 131.171 24.3837 131.531 25.4037 131.611 cv
25.4037 125.211 li
f
25.2437 111.371 mo
31.8438 111.371 li
31.8438 113.171 li
25.3037 113.171 li
24.2638 113.171 23.5037 113.391 22.9837 113.791 cv
22.4637 114.191 22.2038 114.791 22.2038 115.591 cv
22.2038 116.571 22.5238 117.331 23.1437 117.891 cv
23.7637 118.451 24.6037 118.731 25.6637 118.731 cv
31.8438 118.731 li
31.8438 120.531 li
20.9037 120.531 li
20.9037 118.731 li
22.6037 118.731 li
21.9637 118.311 21.4637 117.811 21.1437 117.211 cv
20.8237 116.631 20.6437 115.951 20.6437 115.191 cv
20.6437 113.951 21.0437 112.991 21.8237 112.351 cv
22.6037 111.711 23.7437 111.371 25.2437 111.371 cv
f
17.8037 106.011 mo
20.9037 106.011 li
20.9037 102.311 li
22.3037 102.311 li
22.3037 106.011 li
28.2437 106.011 li
29.1437 106.011 29.7237 105.891 29.9637 105.651 cv
30.2237 105.411 30.3438 104.911 30.3438 104.151 cv
30.3438 102.311 li
31.8438 102.311 li
31.8438 104.151 li
31.8438 105.551 31.5837 106.511 31.0637 107.031 cv
30.5438 107.551 29.6038 107.811 28.2437 107.811 cv
22.3037 107.811 li
22.3037 109.131 li
20.9037 109.131 li
20.9037 107.811 li
17.8037 107.811 li
17.8037 106.011 li
f
16.6637 89.2715 mo
18.1838 90.1515 19.6637 90.7915 21.1237 91.2115 cv
22.5837 91.6515 24.0637 91.8515 25.5637 91.8515 cv
27.0837 91.8515 28.5637 91.6515 30.0238 91.2115 cv
31.5037 90.7915 32.9637 90.1515 34.4637 89.2715 cv
34.4637 90.8315 li
32.9238 91.8115 31.4438 92.5515 29.9637 93.0315 cv
28.4837 93.5115 27.0238 93.7515 25.5637 93.7515 cv
24.1237 93.7515 22.6637 93.5115 21.1838 93.0315 cv
19.7037 92.5515 18.2037 91.8315 16.6637 90.8315 cv
16.6637 89.2715 li
f
21.2237 78.8115 mo
22.9237 78.8115 li
22.6838 79.3315 22.4837 79.8515 22.3438 80.3915 cv
22.2237 80.9515 22.1437 81.5115 22.1437 82.0915 cv
22.1437 82.9915 22.2837 83.6715 22.5637 84.1115 cv
22.8438 84.5515 23.2437 84.7715 23.7837 84.7715 cv
24.2038 84.7715 24.5238 84.6115 24.7638 84.2915 cv
25.0037 83.9715 25.2437 83.3315 25.4437 82.3715 cv
25.5837 81.7515 li
25.8638 80.4715 26.2638 79.5715 26.7437 79.0315 cv
27.2437 78.5115 27.9438 78.2315 28.8237 78.2315 cv
29.8438 78.2315 30.6437 78.6315 31.2237 79.4315 cv
31.8237 80.2315 32.1037 81.3515 32.1037 82.7515 cv
32.1037 83.3515 32.0438 83.9515 31.9438 84.5915 cv
31.8438 85.2315 31.6838 85.8915 31.4438 86.5915 cv
29.5837 86.5915 li
29.9438 85.9315 30.2038 85.2715 30.3638 84.6315 cv
30.5438 83.9915 30.6238 83.3515 30.6238 82.7115 cv
30.6238 81.8715 30.4837 81.2115 30.2038 80.7515 cv
29.9237 80.3115 29.5037 80.0715 28.9637 80.0715 cv
28.4837 80.0715 28.1038 80.2515 27.8438 80.5715 cv
27.5837 80.8915 27.3237 81.6115 27.0837 82.7315 cv
26.9437 83.3515 li
26.7038 84.4715 26.3438 85.2915 25.8638 85.7715 cv
25.3837 86.2715 24.7237 86.5115 23.8638 86.5115 cv
22.8438 86.5115 22.0437 86.1515 21.4837 85.4315 cv
20.9237 84.7115 20.6437 83.6715 20.6437 82.3115 cv
20.6437 81.6515 20.7038 81.0315 20.8037 80.4315 cv
20.9037 79.8515 21.0437 79.3115 21.2237 78.8115 cv
f
16.6637 75.6516 mo
16.6637 74.0916 li
18.2037 73.1316 19.7037 72.3916 21.1838 71.9116 cv
22.6637 71.4316 24.1237 71.1716 25.5637 71.1716 cv
27.0238 71.1716 28.4837 71.4316 29.9637 71.9116 cv
31.4438 72.3916 32.9238 73.1316 34.4637 74.0916 cv
34.4637 75.6516 li
32.9637 74.7916 31.5037 74.1516 30.0238 73.7116 cv
28.5637 73.2916 27.0837 73.0716 25.5637 73.0716 cv
24.0637 73.0716 22.5837 73.2916 21.1237 73.7116 cv
19.6637 74.1516 18.1838 74.7916 16.6637 75.6516 cv
f
79.2 98.4012 mo
186.04 98.4012 li
186.04 50.4 li
79.2 50.4 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
79.2 98.4012 mo
186.04 98.4012 li
186.04 50.4 li
79.2 50.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
1 lj
89.28 61.7606 mo
109.44 61.7606 li
@
gsave
85.03 66.0106 mo
93.53 66.0106 li
93.53 57.5106 li
85.03 57.5106 li
cp
clp
89.28 65.7606 mo
90.3408 65.7606 91.3583 65.3392 92.1084 64.5891 cv
92.8585 63.8389 93.28 62.8214 93.28 61.7606 cv
93.28 60.6998 92.8585 59.6823 92.1084 58.9322 cv
91.3583 58.1821 90.3408 57.7606 89.28 57.7606 cv
88.2192 57.7606 87.2017 58.1821 86.4516 58.9322 cv
85.7015 59.6823 85.28 60.6998 85.28 61.7606 cv
85.28 62.8214 85.7015 63.8389 86.4516 64.5891 cv
87.2017 65.3392 88.2192 65.7606 89.28 65.7606 cv
cp
f
.5 lw
0 lc
89.28 65.7606 mo
90.3408 65.7606 91.3583 65.3392 92.1084 64.5891 cv
92.8585 63.8389 93.28 62.8214 93.28 61.7606 cv
93.28 60.6998 92.8585 59.6823 92.1084 58.9322 cv
91.3583 58.1821 90.3408 57.7606 89.28 57.7606 cv
88.2192 57.7606 87.2017 58.1821 86.4516 58.9322 cv
85.7015 59.6823 85.28 60.6998 85.28 61.7606 cv
85.28 62.8214 85.7015 63.8389 86.4516 64.5891 cv
87.2017 65.3392 88.2192 65.7606 89.28 65.7606 cv
cp
@
grestore
gsave
105.19 66.0106 mo
113.69 66.0106 li
113.69 57.5106 li
105.19 57.5106 li
cp
clp
109.44 65.7606 mo
110.501 65.7606 111.518 65.3392 112.268 64.5891 cv
113.019 63.8389 113.44 62.8214 113.44 61.7606 cv
113.44 60.6998 113.019 59.6823 112.268 58.9322 cv
111.518 58.1821 110.501 57.7606 109.44 57.7606 cv
108.379 57.7606 107.362 58.1821 106.612 58.9322 cv
105.861 59.6823 105.44 60.6998 105.44 61.7606 cv
105.44 62.8214 105.861 63.8389 106.612 64.5891 cv
107.362 65.3392 108.379 65.7606 109.44 65.7606 cv
cp
f
.5 lw
0 lc
109.44 65.7606 mo
110.501 65.7606 111.518 65.3392 112.268 64.5891 cv
113.019 63.8389 113.44 62.8214 113.44 61.7606 cv
113.44 60.6998 113.019 59.6823 112.268 58.9322 cv
111.518 58.1821 110.501 57.7606 109.44 57.7606 cv
108.379 57.7606 107.362 58.1821 106.612 58.9322 cv
105.861 59.6823 105.44 60.6998 105.44 61.7606 cv
105.44 62.8214 105.861 63.8389 106.612 64.5891 cv
107.362 65.3392 108.379 65.7606 109.44 65.7606 cv
cp
@
grestore
125.683 69.0716 mo
125.698 68.9564 li
127.123 63.2252 li
127.253 62.7068 127.483 62.2028 127.814 61.7132 cv
128.146 61.2236 128.549 60.806 129.024 60.4892 cv
129.485 60.1724 129.989 60.014 130.507 60.014 cv
130.91 60.014 131.27 60.1292 131.587 60.3452 cv
131.904 60.5756 132.134 60.8636 132.293 61.2092 cv
132.451 61.5548 132.538 61.9436 132.538 62.3612 cv
132.538 62.8364 132.437 63.326 132.25 63.8156 cv
132.048 64.3052 131.789 64.766 131.458 65.1692 cv
131.126 65.5868 130.738 65.918 130.306 66.1628 cv
129.874 66.3932 129.413 66.5228 128.938 66.5228 cv
128.65 66.5228 128.39 66.4364 128.146 66.2924 cv
127.886 66.134 127.699 65.918 127.555 65.63 cv
126.706 69.014 li
126.677 69.1436 126.605 69.2588 126.49 69.3452 cv
126.374 69.4316 126.259 69.4748 126.115 69.4748 cv
126 69.4748 125.899 69.4316 125.813 69.3596 cv
125.726 69.2876 125.683 69.1868 125.683 69.0716 cv
128.966 66.1628 mo
129.47 66.1628 129.917 65.9036 130.291 65.3852 cv
130.666 64.8668 130.954 64.2476 131.155 63.542 cv
131.357 62.8364 131.458 62.2316 131.458 61.742 cv
131.458 61.382 131.371 61.0652 131.213 60.7916 cv
131.054 60.5324 130.81 60.3884 130.478 60.3884 cv
130.046 60.3884 129.686 60.5468 129.37 60.8636 cv
129.053 61.1804 128.794 61.5548 128.606 61.9868 cv
128.405 62.4188 128.246 62.8508 128.131 63.3116 cv
127.742 64.9244 li
127.8 65.27 127.93 65.5724 128.146 65.8028 cv
128.362 66.0476 128.635 66.1628 128.966 66.1628 cv
f
135.201 70.1529 mo
134.818 70.1529 134.475 70.0521 134.183 69.8303 cv
133.891 69.6086 133.669 69.3263 133.518 68.9635 cv
133.356 68.6107 133.286 68.2478 133.286 67.8748 cv
133.286 67.5926 133.326 67.3204 133.417 67.0483 cv
133.507 66.7761 133.639 66.5342 133.81 66.3124 cv
133.981 66.0907 134.193 65.9193 134.435 65.7883 cv
134.677 65.6673 134.939 65.5967 135.231 65.5967 cv
135.534 65.5967 135.826 65.6572 136.108 65.7681 cv
136.39 65.8891 136.642 66.0403 136.884 66.2318 cv
137.116 66.4233 137.338 66.6451 137.539 66.887 cv
137.842 67.2902 li
138.043 66.9777 138.265 66.6955 138.507 66.4435 cv
138.749 66.1915 139.021 65.9899 139.324 65.8286 cv
139.626 65.6774 139.959 65.5967 140.311 65.5967 cv
140.594 65.5967 140.866 65.6673 141.108 65.7983 cv
141.35 65.9294 141.551 66.1007 141.713 66.3225 cv
141.874 66.5443 142.005 66.7963 142.096 67.0684 cv
142.176 67.3406 142.227 67.6127 142.227 67.8748 cv
142.227 68.2579 142.146 68.6308 141.985 68.9836 cv
141.823 69.3364 141.602 69.6187 141.309 69.8303 cv
141.007 70.0521 140.664 70.1529 140.281 70.1529 cv
139.838 70.1529 139.424 70.042 139.031 69.8102 cv
138.628 69.5783 138.275 69.2659 137.973 68.8727 cv
137.671 68.4695 li
137.358 68.9735 136.995 69.3767 136.582 69.6892 cv
136.159 70.0017 135.705 70.1529 135.201 70.1529 cv
135.1 69.8102 mo
135.947 69.8102 136.713 69.2457 137.388 68.0966 cv
136.854 67.4212 li
136.542 67.018 136.249 66.6955 135.987 66.4636 cv
135.725 66.2419 135.413 66.1209 135.07 66.1209 cv
134.767 66.1209 134.495 66.2116 134.274 66.3729 cv
134.042 66.5443 133.86 66.766 133.739 67.0382 cv
133.608 67.3103 133.548 67.5926 133.548 67.8849 cv
133.548 68.1167 133.578 68.3486 133.649 68.5703 cv
133.719 68.8022 133.82 69.0139 133.961 69.1953 cv
134.092 69.3767 134.253 69.5279 134.445 69.6388 cv
134.636 69.7598 134.858 69.8102 135.1 69.8102 cv
138.658 68.3385 mo
138.961 68.7518 139.253 69.0743 139.515 69.2961 cv
139.777 69.5279 140.09 69.6388 140.443 69.6388 cv
140.664 69.6388 140.866 69.5985 141.057 69.4977 cv
141.239 69.3969 141.4 69.2659 141.541 69.0945 cv
141.682 68.9332 141.783 68.7417 141.854 68.53 cv
141.924 68.3183 141.965 68.0966 141.965 67.8748 cv
141.965 67.5724 141.894 67.27 141.773 66.9676 cv
141.652 66.6652 141.471 66.4233 141.239 66.2318 cv
140.997 66.0503 140.725 65.9495 140.412 65.9495 cv
139.555 65.9495 138.789 66.5241 138.124 67.6631 cv
138.658 68.3385 li
f
150.719 64.4636 mo
150.517 64.3772 li
150.445 64.1756 li
150.517 63.974 li
150.719 63.8876 li
159.762 63.8876 li
159.935 63.974 li
160.021 64.1756 li
159.935 64.3772 li
159.762 64.4636 li
150.719 64.4636 li
150.719 61.67 mo
150.517 61.5836 li
150.445 61.382 li
150.517 61.1948 li
150.719 61.094 li
159.762 61.094 li
159.935 61.1948 li
160.021 61.382 li
159.935 61.5836 li
159.762 61.67 li
150.719 61.67 li
f
163.067 66.3788 mo
163.067 65.8748 li
164.262 65.8748 164.867 65.7308 164.867 65.414 cv
164.867 57.854 li
164.363 58.0988 163.73 58.214 162.981 58.214 cv
162.981 57.71 li
164.147 57.71 165.04 57.4076 165.645 56.7884 cv
165.846 56.7884 li
165.947 56.8316 li
165.99 56.918 li
165.99 65.414 li
165.99 65.7308 166.581 65.8748 167.79 65.8748 cv
167.79 66.3788 li
163.067 66.3788 li
f
170.133 65.5868 mo
170.133 65.3708 170.205 65.1836 170.363 65.0252 cv
170.522 64.8812 170.709 64.7948 170.925 64.7948 cv
171.054 64.7948 171.184 64.838 171.314 64.91 cv
171.429 64.982 171.53 65.0828 171.602 65.198 cv
171.674 65.3276 171.717 65.4572 171.717 65.5868 cv
171.717 65.8028 171.63 65.99 171.486 66.1484 cv
171.328 66.3068 171.141 66.3788 170.925 66.3788 cv
170.709 66.3788 170.522 66.3068 170.363 66.1484 cv
170.205 65.99 170.133 65.8028 170.133 65.5868 cv
f
176.628 66.6812 mo
175.447 66.6812 174.641 66.206 174.223 65.2411 cv
173.791 64.2764 173.59 63.1244 173.59 61.7852 cv
173.59 60.95 173.662 60.1724 173.82 59.438 cv
173.964 58.7036 174.267 58.0844 174.727 57.566 cv
175.174 57.0476 175.807 56.7884 176.628 56.7884 cv
177.262 56.7884 177.78 56.9468 178.183 57.2492 cv
178.587 57.566 178.889 57.9548 179.105 58.4444 cv
179.307 58.934 179.451 59.4668 179.537 60.0284 cv
179.609 60.59 179.652 61.1804 179.652 61.7852 cv
179.652 62.6204 179.566 63.3836 179.422 64.1036 cv
179.263 64.8236 178.961 65.4428 178.515 65.9324 cv
178.068 66.422 177.435 66.6812 176.628 66.6812 cv
176.628 66.3212 mo
177.161 66.3212 177.564 66.0476 177.823 65.5004 cv
178.083 64.9532 178.241 64.3484 178.299 63.686 cv
178.356 63.0236 178.399 62.3036 178.399 61.5548 cv
178.399 60.8348 178.356 60.1724 178.299 59.5676 cv
178.241 58.9628 178.083 58.4012 177.823 57.9116 cv
177.564 57.422 177.161 57.1628 176.628 57.1628 cv
176.081 57.1628 175.678 57.422 175.419 57.9116 cv
175.159 58.4012 174.987 58.9628 174.929 59.5676 cv
174.871 60.1724 174.843 60.8348 174.843 61.5548 cv
174.843 62.102 174.843 62.606 174.871 63.0668 cv
174.9 63.542 174.972 64.0316 175.087 64.5356 cv
175.203 65.0396 175.375 65.4572 175.635 65.8028 cv
175.879 66.1484 176.211 66.3212 176.628 66.3212 cv
f
89.28 83.6013 mo
109.44 83.6013 li
.930816 .793027 0 0 cmyk
@
85.28 87.6013 mo
93.28 87.6013 li
93.28 79.6013 li
85.28 79.6013 li
cp
f
.5 lw
0 lc
0 lj
85.28 87.6013 mo
93.28 87.6013 li
93.28 79.6013 li
85.28 79.6013 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
105.44 87.6013 mo
113.44 87.6013 li
113.44 79.6013 li
105.44 79.6013 li
cp
.930816 .793027 0 0 cmyk
f
105.44 87.6013 mo
113.44 87.6013 li
113.44 79.6013 li
105.44 79.6013 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
125.683 90.9122 mo
125.698 90.797 li
127.123 85.0658 li
127.253 84.5474 127.483 84.0434 127.814 83.5538 cv
128.146 83.0642 128.549 82.6466 129.024 82.3298 cv
129.485 82.013 129.989 81.8546 130.507 81.8546 cv
130.91 81.8546 131.27 81.9698 131.587 82.1858 cv
131.904 82.4162 132.134 82.7042 132.293 83.0498 cv
132.451 83.3954 132.538 83.7842 132.538 84.2018 cv
132.538 84.677 132.437 85.1666 132.25 85.6562 cv
132.048 86.1458 131.789 86.6066 131.458 87.0098 cv
131.126 87.4274 130.738 87.7586 130.306 88.0034 cv
129.874 88.2338 129.413 88.3634 128.938 88.3634 cv
128.65 88.3634 128.39 88.277 128.146 88.133 cv
127.886 87.9746 127.699 87.7586 127.555 87.4706 cv
126.706 90.8546 li
126.677 90.9842 126.605 91.0994 126.49 91.1858 cv
126.374 91.2722 126.259 91.3154 126.115 91.3154 cv
126 91.3154 125.899 91.2722 125.813 91.2002 cv
125.726 91.1282 125.683 91.0274 125.683 90.9122 cv
128.966 88.0034 mo
129.47 88.0034 129.917 87.7442 130.291 87.2258 cv
130.666 86.7074 130.954 86.0882 131.155 85.3826 cv
131.357 84.677 131.458 84.0722 131.458 83.5826 cv
131.458 83.2226 131.371 82.9058 131.213 82.6322 cv
131.054 82.373 130.81 82.229 130.478 82.229 cv
130.046 82.229 129.686 82.3874 129.37 82.7042 cv
129.053 83.021 128.794 83.3954 128.606 83.8274 cv
128.405 84.2594 128.246 84.6914 128.131 85.1522 cv
127.742 86.765 li
127.8 87.1106 127.93 87.413 128.146 87.6434 cv
128.362 87.8882 128.635 88.0034 128.966 88.0034 cv
f
135.201 91.9935 mo
134.818 91.9935 134.475 91.8927 134.183 91.6709 cv
133.891 91.4492 133.669 91.1669 133.518 90.8041 cv
133.356 90.4513 133.286 90.0884 133.286 89.7154 cv
133.286 89.4332 133.326 89.161 133.417 88.8889 cv
133.507 88.6167 133.639 88.3748 133.81 88.153 cv
133.981 87.9313 134.193 87.7599 134.435 87.6289 cv
134.677 87.5079 134.939 87.4373 135.231 87.4373 cv
135.534 87.4373 135.826 87.4978 136.108 87.6087 cv
136.39 87.7297 136.642 87.8809 136.884 88.0724 cv
137.116 88.2639 137.338 88.4857 137.539 88.7276 cv
137.842 89.1308 li
138.043 88.8183 138.265 88.5361 138.507 88.2841 cv
138.749 88.0321 139.021 87.8305 139.324 87.6692 cv
139.626 87.518 139.959 87.4373 140.311 87.4373 cv
140.594 87.4373 140.866 87.5079 141.108 87.6389 cv
141.35 87.77 141.551 87.9413 141.713 88.1631 cv
141.874 88.3849 142.005 88.6369 142.096 88.909 cv
142.176 89.1812 142.227 89.4533 142.227 89.7154 cv
142.227 90.0985 142.146 90.4714 141.985 90.8242 cv
141.823 91.177 141.602 91.4593 141.309 91.6709 cv
141.007 91.8927 140.664 91.9935 140.281 91.9935 cv
139.838 91.9935 139.424 91.8826 139.031 91.6508 cv
138.628 91.4189 138.275 91.1065 137.973 90.7133 cv
137.671 90.3102 li
137.358 90.8141 136.995 91.2173 136.582 91.5298 cv
136.159 91.8423 135.705 91.9935 135.201 91.9935 cv
135.1 91.6508 mo
135.947 91.6508 136.713 91.0863 137.388 89.9372 cv
136.854 89.2618 li
136.542 88.8586 136.249 88.5361 135.987 88.3042 cv
135.725 88.0825 135.413 87.9615 135.07 87.9615 cv
134.767 87.9615 134.495 88.0522 134.274 88.2135 cv
134.042 88.3849 133.86 88.6066 133.739 88.8788 cv
133.608 89.1509 133.548 89.4332 133.548 89.7255 cv
133.548 89.9573 133.578 90.1892 133.649 90.4109 cv
133.719 90.6428 133.82 90.8545 133.961 91.0359 cv
134.092 91.2173 134.253 91.3685 134.445 91.4794 cv
134.636 91.6004 134.858 91.6508 135.1 91.6508 cv
138.658 90.1791 mo
138.961 90.5924 139.253 90.9149 139.515 91.1367 cv
139.777 91.3685 140.09 91.4794 140.443 91.4794 cv
140.664 91.4794 140.866 91.4391 141.057 91.3383 cv
141.239 91.2375 141.4 91.1065 141.541 90.9351 cv
141.682 90.7738 141.783 90.5823 141.854 90.3706 cv
141.924 90.159 141.965 89.9372 141.965 89.7154 cv
141.965 89.413 141.894 89.1106 141.773 88.8082 cv
141.652 88.5058 141.471 88.2639 141.239 88.0724 cv
140.997 87.8909 140.725 87.7901 140.412 87.7901 cv
139.555 87.7901 138.789 88.3647 138.124 89.5037 cv
138.658 90.1791 li
f
150.719 86.3042 mo
150.517 86.2178 li
150.445 86.0162 li
150.517 85.8146 li
150.719 85.7282 li
159.762 85.7282 li
159.935 85.8146 li
160.021 86.0162 li
159.935 86.2178 li
159.762 86.3042 li
150.719 86.3042 li
150.719 83.5106 mo
150.517 83.4242 li
150.445 83.2226 li
150.517 83.0354 li
150.719 82.9346 li
159.762 82.9346 li
159.935 83.0354 li
160.021 83.2226 li
159.935 83.4242 li
159.762 83.5106 li
150.719 83.5106 li
f
165.328 88.5218 mo
164.147 88.5218 163.341 88.0466 162.923 87.0818 cv
162.491 86.117 162.29 84.965 162.29 83.6258 cv
162.29 82.7906 162.362 82.013 162.52 81.2786 cv
162.664 80.5442 162.966 79.925 163.427 79.4066 cv
163.874 78.8882 164.507 78.629 165.328 78.629 cv
165.962 78.629 166.48 78.7874 166.883 79.0898 cv
167.286 79.4066 167.589 79.7954 167.805 80.285 cv
168.006 80.7746 168.15 81.3074 168.237 81.869 cv
168.309 82.4306 168.352 83.021 168.352 83.6258 cv
168.352 84.461 168.266 85.2242 168.122 85.9442 cv
167.963 86.6642 167.661 87.2834 167.214 87.773 cv
166.768 88.2626 166.134 88.5218 165.328 88.5218 cv
165.328 88.1618 mo
165.861 88.1618 166.264 87.8882 166.523 87.341 cv
166.782 86.7938 166.941 86.189 166.998 85.5266 cv
167.056 84.8642 167.099 84.1442 167.099 83.3954 cv
167.099 82.6754 167.056 82.013 166.998 81.4082 cv
166.941 80.8034 166.782 80.2418 166.523 79.7522 cv
166.264 79.2626 165.861 79.0034 165.328 79.0034 cv
164.781 79.0034 164.378 79.2626 164.118 79.7522 cv
163.859 80.2418 163.686 80.8034 163.629 81.4082 cv
163.571 82.013 163.542 82.6754 163.542 83.3954 cv
163.542 83.9426 163.542 84.4466 163.571 84.9074 cv
163.6 85.3826 163.672 85.8722 163.787 86.3762 cv
163.902 86.8802 164.075 87.2978 164.334 87.6434 cv
164.579 87.989 164.91 88.1618 165.328 88.1618 cv
f
170.133 87.4274 mo
170.133 87.2114 170.205 87.0242 170.363 86.8658 cv
170.522 86.7218 170.709 86.6354 170.925 86.6354 cv
171.054 86.6354 171.184 86.6786 171.314 86.7506 cv
171.429 86.8226 171.53 86.9234 171.602 87.0386 cv
171.674 87.1682 171.717 87.2978 171.717 87.4274 cv
171.717 87.6434 171.63 87.8306 171.486 87.989 cv
171.328 88.1474 171.141 88.2194 170.925 88.2194 cv
170.709 88.2194 170.522 88.1474 170.363 87.989 cv
170.205 87.8306 170.133 87.6434 170.133 87.4274 cv
f
174.655 87.6146 mo
174.915 87.9314 175.361 88.0754 176.023 88.0754 cv
176.383 88.0754 176.729 87.9602 177.046 87.701 cv
177.363 87.4562 177.607 87.1538 177.78 86.7938 cv
177.982 86.3906 178.111 85.9442 178.169 85.4834 cv
178.227 85.0226 178.255 84.461 178.255 83.7698 cv
178.083 84.1586 177.852 84.4754 177.55 84.7202 cv
177.233 84.9794 176.887 85.0946 176.484 85.0946 cv
175.923 85.0946 175.419 84.9506 174.987 84.6482 cv
174.555 84.3458 174.209 83.9426 173.979 83.453 cv
173.748 82.9634 173.633 82.4306 173.633 81.869 cv
173.633 81.293 173.763 80.7602 174.022 80.2562 cv
174.281 79.7666 174.655 79.3634 175.116 79.0754 cv
175.577 78.7874 176.095 78.629 176.7 78.629 cv
177.276 78.629 177.751 78.7874 178.155 79.1042 cv
178.543 79.421 178.846 79.8386 179.047 80.3282 cv
179.249 80.8322 179.393 81.365 179.479 81.9122 cv
179.566 82.4738 179.609 83.021 179.609 83.5682 cv
179.609 84.317 179.465 85.0658 179.191 85.8434 cv
178.918 86.621 178.515 87.2546 177.982 87.7586 cv
177.435 88.2626 176.787 88.5218 176.023 88.5218 cv
175.447 88.5218 174.972 88.3922 174.583 88.133 cv
174.18 87.8738 173.993 87.4706 173.993 86.9234 cv
173.993 86.7362 174.051 86.5778 174.195 86.4338 cv
174.324 86.3042 174.483 86.2322 174.684 86.2322 cv
174.871 86.2322 175.03 86.3042 175.174 86.4338 cv
175.303 86.5778 175.375 86.7362 175.375 86.9234 cv
175.375 87.125 175.303 87.2834 175.174 87.413 cv
175.03 87.557 174.871 87.6146 174.684 87.6146 cv
174.655 87.6146 li
176.542 84.7202 mo
176.931 84.7202 177.247 84.5906 177.507 84.3314 cv
177.751 84.0722 177.939 83.741 178.054 83.3378 cv
178.169 82.949 178.227 82.5602 178.227 82.157 cv
178.227 81.8834 li
178.227 81.8258 li
178.227 81.1058 178.111 80.4722 177.91 79.8962 cv
177.694 79.3346 177.291 79.0466 176.7 79.0466 cv
176.311 79.0466 175.995 79.133 175.764 79.2914 cv
175.534 79.4642 175.361 79.6802 175.246 79.9538 cv
175.131 80.2418 175.059 80.5298 175.03 80.8466 cv
175.001 81.1634 174.987 81.509 174.987 81.869 cv
174.987 82.4162 175.001 82.8914 175.059 83.2658 cv
175.116 83.6546 175.26 84.0002 175.491 84.2882 cv
175.721 84.5762 176.067 84.7202 176.542 84.7202 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
